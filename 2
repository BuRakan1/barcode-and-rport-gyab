def exclude_selected_students(self):
    """استبعاد المتدربين المحددين الذين حالتهم 'لم يباشر'"""
    # التحقق من وجود صلاحية المشرف
    if not self.current_user["permissions"]["is_admin"]:
        messagebox.showwarning("تنبيه", "هذه الوظيفة متاحة للمشرفين فقط")
        return

    # التحقق من أن التصفية المحددة هي "لم يباشر"
    current_filter = self.status_filter_var.get()
    if current_filter != "لم يباشر":
        messagebox.showwarning("تنبيه", "يجب تصفية القائمة بحالة 'لم يباشر' أولاً")
        return

    # الحصول على العناصر المحددة من قائمة الـ checkbox
    selected_items = []
    for item in self.attendance_tree.get_children():
        if item in self.selected_students:
            selected_items.append(item)

    # التحقق من أن هناك عناصر محددة
    if not selected_items:
        messagebox.showwarning("تنبيه", "الرجاء تحديد المتدربين المراد استبعادهم بالضغط على مربعات الاختيار")
        return

    # استخراج معلومات المتدربين المحددين
    selected_students = []
    for item in selected_items:
        values = self.attendance_tree.item(item, "values")
        national_id = values[1]  # الآن في العمود الثاني بعد إضافة checkbox
        name = values[2]  # الآن في العمود الثالث

        # التحقق من أن حالة المتدرب هي "لم يباشر"
        status = values[5]  # الآن في العمود السادس
        if status != "لم يباشر":
            messagebox.showwarning("تنبيه", f"المتدرب {name} ليست حالته 'لم يباشر'، لذا لا يمكن استبعاده")
            return

        selected_students.append((national_id, name))

    # إنشاء نافذة اختيار سبب الاستبعاد
    reason_window = tk.Toplevel(self.root)
    reason_window.title("سبب الاستبعاد")
    reason_window.geometry("400x300")
    reason_window.configure(bg=self.colors["light"])
    reason_window.transient(self.root)
    reason_window.grab_set()

    # توسيط النافذة
    x = (reason_window.winfo_screenwidth() - 400) // 2
    y = (reason_window.winfo_screenheight() - 300) // 2
    reason_window.geometry(f"400x300+{x}+{y}")

    # عنوان النافذة
    tk.Label(
        reason_window,
        text=f"اختر سبب استبعاد {len(selected_students)} متدرب",
        font=self.fonts["title"],
        bg=self.colors["primary"],
        fg="white",
        padx=10, pady=10
    ).pack(fill=tk.X)

    # إطار الخيارات
    options_frame = tk.Frame(reason_window, bg=self.colors["light"], padx=20, pady=20)
    options_frame.pack(fill=tk.BOTH, expand=True)

    # متغير لتخزين الخيار المحدد
    selected_reason = tk.StringVar(value="عدم مباشرة الدورة")

    # الخيارات الثلاثة
    reasons = [
        ("عدم مباشرة الدورة", "عدم مباشرة الدورة"),
        ("إلغاء دورة", "إلغاء دورة"),
        ("أخرى", "other")
    ]

    for text, value in reasons:
        tk.Radiobutton(
            options_frame,
            text=text,
            variable=selected_reason,
            value=value,
            font=self.fonts["text_bold"],
            bg=self.colors["light"],
            activebackground=self.colors["light"]
        ).pack(anchor=tk.W, pady=5)

    # إطار لإدخال السبب المخصص (يظهر فقط عند اختيار "أخرى")
    custom_reason_frame = tk.Frame(options_frame, bg=self.colors["light"])
    custom_reason_label = tk.Label(
        custom_reason_frame,
        text="أدخل السبب:",
        font=self.fonts["text"],
        bg=self.colors["light"]
    )
    custom_reason_entry = tk.Entry(
        custom_reason_frame,
        font=self.fonts["text"],
        width=30
    )

    def toggle_custom_reason(*args):
        """إظهار/إخفاء حقل السبب المخصص"""
        if selected_reason.get() == "other":
            custom_reason_frame.pack(fill=tk.X, pady=10)
            custom_reason_label.pack(anchor=tk.W)
            custom_reason_entry.pack(fill=tk.X, pady=5)
            custom_reason_entry.focus_set()
        else:
            custom_reason_frame.pack_forget()

    # ربط تغيير الخيار بدالة إظهار/إخفاء السبب المخصص
    selected_reason.trace("w", toggle_custom_reason)

    # أزرار الإجراءات
    buttons_frame = tk.Frame(reason_window, bg=self.colors["light"], pady=10)
    buttons_frame.pack(fill=tk.X, padx=20)

    def confirm_exclusion():
        """تأكيد الاستبعاد"""
        # الحصول على السبب النهائي
        if selected_reason.get() == "other":
            exclusion_reason = custom_reason_entry.get().strip()
            if not exclusion_reason:
                messagebox.showwarning("تنبيه", "الرجاء إدخال سبب الاستبعاد")
                return
        else:
            exclusion_reason = selected_reason.get()

        # إغلاق نافذة السبب
        reason_window.destroy()

        # تأكيد الاستبعاد
        if not messagebox.askyesno(
                "تأكيد الاستبعاد",
                f"هل أنت متأكد من استبعاد {len(selected_students)} متدرب بسبب:\n{exclusion_reason}"
        ):
            return

        # استبعاد المتدربين المحددين
        current_date = datetime.datetime.now().strftime("%Y-%m-%d")
        excluded_count = 0

        try:
            cursor = self.conn.cursor()
            for national_id, name in selected_students:
                with self.conn:
                    # تحديث حالة المتدرب إلى مستبعد
                    self.conn.execute("""
                           UPDATE trainees 
                           SET is_excluded=1, 
                               exclusion_reason=?, 
                               excluded_date=?
                           WHERE national_id=?
                       """, (exclusion_reason, current_date, national_id))

                    excluded_count += 1

            messagebox.showinfo("نجاح", f"تم استبعاد {excluded_count} متدرب بنجاح")

            # تحديث عرض الحضور والإحصائيات بعد الاستبعاد
            self.update_attendance_display()
            self.update_statistics()
            self.update_students_tree()

        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء استبعاد المتدربين: {str(e)}")

    confirm_btn = tk.Button(
        buttons_frame,
        text="تأكيد",
        font=self.fonts["text_bold"],
        bg=self.colors["success"],
        fg="white",
        padx=15, pady=5,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=confirm_exclusion
    )
    confirm_btn.pack(side=tk.LEFT, padx=5)

    cancel_btn = tk.Button(
        buttons_frame,
        text="إلغاء",
        font=self.fonts["text_bold"],
        bg=self.colors["danger"],
        fg="white",
        padx=15, pady=5,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=reason_window.destroy
    )
    cancel_btn.pack(side=tk.RIGHT, padx=5)


def export_official_completion(self):
    """تصدير التكميل الرسمي للدورات إلى Excel مع معالجة أنواع الغياب بعذر المختلفة"""
    if not self.current_user["permissions"]["can_export_data"]:
        messagebox.showwarning("تنبيه", "ليس لديك صلاحية تصدير البيانات")
        return

    try:
        # التحقق من تواريخ انتهاء جميع الدورات
        current_date = datetime.datetime.now().date()
        cursor = self.conn.cursor()

        # الحصول على الدورات التي تجاوزت تاريخ النهاية
        cursor.execute("""
            SELECT course_name, end_date_system
            FROM course_info
            WHERE end_date_system IS NOT NULL AND end_date_system != ''
        """)

        expired_courses = []
        for course_name, end_date_str in cursor.fetchall():
            try:
                end_date = datetime.datetime.strptime(end_date_str, "%Y-%m-%d").date()
                if current_date > end_date:
                    expired_courses.append(course_name)
            except:
                continue

        if expired_courses:
            courses_list = "\n".join(f"- {course}" for course in expired_courses)
            messagebox.showwarning(
                "دورات منتهية",
                f"لا يمكن تصدير التكميل الرسمي لوجود دورات انتهت ولم يتم تخريجها:\n\n{courses_list}\n\n"
                "يجب تخريج هذه الدورات من النظام أولاً"
            )
            return

        # الحصول على تاريخ التصدير المطلوب من صفحة استعراض الحضور
        selected_date = self.log_date_entry.get_date().strftime("%Y-%m-%d")

        # التحقق من وجود سجلات حضور في التاريخ المحدد
        cursor.execute("""
            SELECT COUNT(*) 
            FROM attendance 
            WHERE date = ?
        """, (selected_date,))

        attendance_count = cursor.fetchone()[0]

        if attendance_count == 0:
            messagebox.showwarning(
                "لا توجد سجلات",
                f"لا توجد سجلات حضور بتاريخ {selected_date}\n"
                "يجب تسجيل الحضور أولاً قبل تصدير التكميل الرسمي"
            )
            return

        # التحقق من المتدربين غير المسجلين في التاريخ المحدد
        cursor.execute("""
            SELECT COUNT(*)
            FROM trainees t
            WHERE (t.is_excluded = 0 OR (t.is_excluded = 1 AND t.excluded_date > ?))
            AND t.course != '' AND t.course IS NOT NULL
            AND t.national_id NOT IN (
                SELECT a.national_id 
                FROM attendance a 
                WHERE a.date = ?
            )
        """, (selected_date, selected_date))

        unregistered_count = cursor.fetchone()[0]

        if unregistered_count > 0:
            # الحصول على أسماء بعض المتدربين غير المسجلين للعرض
            cursor.execute("""
                SELECT t.name, t.course
                FROM trainees t
                WHERE (t.is_excluded = 0 OR (t.is_excluded = 1 AND t.excluded_date > ?))
                AND t.course != '' AND t.course IS NOT NULL
                AND t.national_id NOT IN (
                    SELECT a.national_id 
                    FROM attendance a 
                    WHERE a.date = ?
                )
                LIMIT 5
            """, (selected_date, selected_date))

            unregistered_students = cursor.fetchall()

            # بناء رسالة التنبيه
            message = f"لا يمكن تصدير التكميل الرسمي\n\n"
            message += f"يوجد عدد ({unregistered_count}) متدرب غير مسجل حضورهم بتاريخ {selected_date}\n\n"

            if unregistered_students:
                message += "المتدربين الغير المسجلين هم :\n"
                for i, (name, course) in enumerate(unregistered_students[:5]):
                    message += f"{i + 1}. {name} - دورة: {course}\n"

                if unregistered_count > 5:
                    message += f"\n... وغيرهم ({unregistered_count - 5} متدرب آخر)\n"

            message += "\nيجب تسجيل حضور جميع المتدربين أولاً"

            messagebox.showwarning("متدربين غير مسجلين", message)
            return

        # اختيار مسار الحفظ
        export_file = filedialog.asksaveasfilename(
            defaultextension=".xlsx",
            filetypes=[("Excel files", "*.xlsx")],
            initialfile=f"التكميل_الرسمي_{selected_date}.xlsx"
        )

        if not export_file:
            return

        # الحصول على بيانات جميع الدورات النشطة أو المستبعدة بعد التاريخ المحدد
        cursor.execute("""
            SELECT DISTINCT t.course, COALESCE(ci.course_category, 'مشتركة') as category
            FROM trainees t
            LEFT JOIN course_info ci ON t.course = ci.course_name
            WHERE (t.is_excluded = 0 OR (t.is_excluded = 1 AND t.excluded_date > ?))
            AND t.course != '' AND t.course IS NOT NULL
            ORDER BY t.course
        """, (selected_date,))

        courses_data = cursor.fetchall()

        if not courses_data:
            messagebox.showinfo("تنبيه", "لا توجد دورات نشطة لتصدير التكميل الرسمي")
            return

        # حساب الإحصائيات لكل فئة
        categories = ["ضباط", "أفراد", "مشتركة", "مدنيين"]
        stats = {cat: {
            'courses': set(),
            'students': 0,
            'absent': 0,
            'late': 0,
            'sick_leave': 0,
            'not_started': 0
        } for cat in categories}

        # جمع البيانات لليوم المحدد فقط
        for course_name, course_category in courses_data:
            if course_category not in categories:
                course_category = "مشتركة"  # القيمة الافتراضية

            stats[course_category]['courses'].add(course_name)

            # عدد المتدربين في الدورة (شامل الذين تم استبعادهم بعد التاريخ المحدد)
            cursor.execute("""
                SELECT COUNT(*) FROM trainees
                WHERE course = ? 
                AND (is_excluded = 0 OR (is_excluded = 1 AND excluded_date > ?))
            """, (course_name, selected_date))
            stats[course_category]['students'] += cursor.fetchone()[0]

            # إحصائيات الحضور المعدلة لليوم المحدد
            # تعديل الاستعلام لاحتساب الغياب بعذر بشكل صحيح
            cursor.execute("""
                SELECT 
                    a.status,
                    a.excuse_reason,
                    COUNT(*) as count
                FROM attendance a
                JOIN trainees t ON a.national_id = t.national_id
                WHERE t.course = ? 
                AND (t.is_excluded = 0 OR (t.is_excluded = 1 AND t.excluded_date > ?))
                AND a.date = ?
                GROUP BY a.status, a.excuse_reason
            """, (course_name, selected_date, selected_date))

            results = cursor.fetchall()

            for status, excuse_reason, count in results:
                if status == "غائب":
                    stats[course_category]['absent'] += count
                elif status == "متأخر":
                    stats[course_category]['late'] += count
                elif status == "منوم":
                    stats[course_category]['sick_leave'] += count
                elif status == "لم يباشر":
                    stats[course_category]['not_started'] += count
                elif status == "حالة وفاة":
                    stats[course_category]['absent'] += count  # تُحسب مع الغياب
                elif status == "غائب بعذر":
                    # معالجة الغياب بعذر حسب نوع العذر
                    if excuse_reason and "إجازة مرضية" in excuse_reason:
                        stats[course_category]['sick_leave'] += count
                    else:
                        # جميع أنواع الغياب بعذر الأخرى تُحسب كغياب
                        stats[course_category]['absent'] += count

        # إنشاء DataFrame للإحصائيات
        stats_data = []
        row_labels = ["عدد الدورات", "عدد الملتحقين", "الغياب", "تأخير", "إجازة مرضية", "لم يباشر", "المجموع"]

        for i, label in enumerate(row_labels):
            row = {"م": label}
            for category in categories:
                cat_stats = stats[category]
                if label == "عدد الدورات":
                    row[category] = len(cat_stats['courses'])
                elif label == "عدد الملتحقين":
                    row[category] = cat_stats['students']
                elif label == "الغياب":
                    row[category] = cat_stats['absent']
                elif label == "تأخير":
                    row[category] = cat_stats['late']
                elif label == "إجازة مرضية":
                    row[category] = cat_stats['sick_leave']
                elif label == "لم يباشر":
                    row[category] = cat_stats['not_started']
                elif label == "المجموع":
                    # حساب المجموع = عدد الملتحقين - (الغياب + التأخير + الإجازة المرضية + لم يباشر)
                    total = cat_stats['students'] - (cat_stats['absent'] + cat_stats['late'] +
                                                     cat_stats['sick_leave'] + cat_stats['not_started'])
                    row[category] = total
            stats_data.append(row)

        df_stats = pd.DataFrame(stats_data)

        # إنشاء DataFrame للتفاصيل لليوم المحدد فقط
        details_data = []
        row_num = 1

        # الغياب والتأخير والإجازات المرضية لليوم المحدد
        cursor.execute("""
            SELECT t.name, t.national_id, a.status, a.excuse_reason, COALESCE(ci.course_category, 'مشتركة') as category
            FROM attendance a
            JOIN trainees t ON a.national_id = t.national_id
            LEFT JOIN course_info ci ON t.course = ci.course_name
            WHERE a.status IN ('غائب', 'متأخر', 'منوم', 'حالة وفاة', 'غائب بعذر')
            AND (t.is_excluded = 0 OR (t.is_excluded = 1 AND t.excluded_date > ?))
            AND a.date = ?
            ORDER BY a.status, t.name
        """, (selected_date, selected_date))

        for name, national_id, status, excuse_reason, category in cursor.fetchall():
            # معالجة الغياب بعذر حسب النوع
            if status == "غائب بعذر":
                if excuse_reason and "إجازة مرضية" in excuse_reason:
                    # إجازة مرضية تظهر في خانة الإجازات المرضية
                    note = f"إجازة مرضية {category}"
                    details_data.append({
                        "العدد": row_num,
                        "الاسم": name,
                        "رقم الهوية": national_id,
                        "ملاحظة": note
                    })
                    row_num += 1
                else:
                    # جميع أنواع الغياب بعذر الأخرى تظهر كغياب
                    note = f"غياب {category}"
                    if excuse_reason:
                        # إضافة نوع العذر إن وجد
                        excuse_text = excuse_reason.replace("[يظهر في التكميل]", "").replace("[لا يظهر في التكميل]",
                                                                                             "").strip()
                        if excuse_text and excuse_text not in ["إجازة أبوة", "حضور للمحكمة كشاهد"]:
                            note += f" - {excuse_text}"
                    details_data.append({
                        "العدد": row_num,
                        "الاسم": name,
                        "رقم الهوية": national_id,
                        "ملاحظة": note
                    })
                    row_num += 1
            elif status == "غائب":
                note = f"غياب {category}"
                details_data.append({
                    "العدد": row_num,
                    "الاسم": name,
                    "رقم الهوية": national_id,
                    "ملاحظة": note
                })
                row_num += 1
            elif status == "متأخر":
                note = f"تأخير {category}"
                details_data.append({
                    "العدد": row_num,
                    "الاسم": name,
                    "رقم الهوية": national_id,
                    "ملاحظة": note
                })
                row_num += 1
            elif status == "منوم":
                note = f"إجازة مرضية {category}"
                details_data.append({
                    "العدد": row_num,
                    "الاسم": name,
                    "رقم الهوية": national_id,
                    "ملاحظة": note
                })
                row_num += 1
            elif status == "حالة وفاة":
                note = f"غياب {category} - حالة وفاة"
                details_data.append({
                    "العدد": row_num,
                    "الاسم": name,
                    "رقم الهوية": national_id,
                    "ملاحظة": note
                })
                row_num += 1

        # إضافة سطر فارغ
        details_data.append({"العدد": "", "الاسم": "", "رقم الهوية": "", "ملاحظة": ""})
        details_data.append({"العدد": "", "الاسم": "", "رقم الهوية": "", "ملاحظة": ""})

        # "لم يباشر" في الأسفل لليوم المحدد
        cursor.execute("""
            SELECT t.name, t.national_id, COALESCE(ci.course_category, 'مشتركة') as category
            FROM attendance a
            JOIN trainees t ON a.national_id = t.national_id
            LEFT JOIN course_info ci ON t.course = ci.course_name
            WHERE a.status = 'لم يباشر'
            AND (t.is_excluded = 0 OR (t.is_excluded = 1 AND t.excluded_date > ?))
            AND a.date = ?
            ORDER BY t.name
        """, (selected_date, selected_date))

        for name, national_id, category in cursor.fetchall():
            details_data.append({
                "العدد": row_num,
                "الاسم": name,
                "رقم الهوية": national_id,
                "ملاحظة": f"لم يباشر {category}"
            })
            row_num += 1

        df_details = pd.DataFrame(details_data)

        # كتابة البيانات إلى Excel (باقي الكود كما هو)
        with pd.ExcelWriter(export_file, engine='openpyxl') as writer:
            # كتابة صفحة الإحصائيات
            df_stats.to_excel(writer, sheet_name='الإحصائيات', index=False, startrow=2)

            # كتابة صفحة التفاصيل
            df_details.to_excel(writer, sheet_name='التفاصيل', index=False, startrow=2)

            # تنسيق الصفحات (باقي الكود كما هو)
            workbook = writer.book

            # الحصول على اليوم والتاريخ
            selected_date_obj = self.log_date_entry.get_date()
            day_name = selected_date_obj.strftime('%A')
            # تحويل اسم اليوم إلى العربية
            days_arabic = {
                'Sunday': 'الأحد',
                'Monday': 'الاثنين',
                'Tuesday': 'الثلاثاء',
                'Wednesday': 'الأربعاء',
                'Thursday': 'الخميس',
                'Friday': 'الجمعة',
                'Saturday': 'السبت'
            }
            day_arabic = days_arabic.get(day_name, day_name)
            date_formatted = selected_date_obj.strftime('%Y/%m/%d')

            # تنسيق صفحة الإحصائيات
            stats_sheet = workbook['الإحصائيات']
            stats_sheet.sheet_view.rightToLeft = True

            # إضافة العنوان الرئيسي
            stats_sheet.merge_cells('A1:E1')
            stats_sheet[
                'A1'] = f"التكميل اليومي لدورات التخصصية المنعقدة بمدنية تدريب الأمن العام بالمنطقة الشرقية ليوم {day_arabic} الموافق {date_formatted}"
            stats_sheet['A1'].font = openpyxl.styles.Font(bold=True, size=14)
            stats_sheet['A1'].alignment = openpyxl.styles.Alignment(horizontal="center", vertical="center",
                                                                    wrap_text=True)
            stats_sheet['A1'].fill = openpyxl.styles.PatternFill(start_color="E0E0E0", end_color="E0E0E0",
                                                                 fill_type="solid")

            # تنسيق الرؤوس
            for row in stats_sheet['A3:E3']:
                for cell in row:
                    cell.font = openpyxl.styles.Font(bold=True, size=12)
                    cell.fill = openpyxl.styles.PatternFill(start_color="4CAF50", end_color="4CAF50", fill_type="solid")
                    cell.font = openpyxl.styles.Font(bold=True, color="FFFFFF", size=12)
                    cell.alignment = openpyxl.styles.Alignment(horizontal="center", vertical="center")
                    cell.border = openpyxl.styles.Border(
                        left=openpyxl.styles.Side(style='thin'),
                        right=openpyxl.styles.Side(style='thin'),
                        top=openpyxl.styles.Side(style='thin'),
                        bottom=openpyxl.styles.Side(style='thin')
                    )

            # تنسيق البيانات
            for row in stats_sheet.iter_rows(min_row=4, max_row=stats_sheet.max_row, min_col=1, max_col=5):
                for cell in row:
                    cell.alignment = openpyxl.styles.Alignment(horizontal="center", vertical="center")
                    cell.border = openpyxl.styles.Border(
                        left=openpyxl.styles.Side(style='thin'),
                        right=openpyxl.styles.Side(style='thin'),
                        top=openpyxl.styles.Side(style='thin'),
                        bottom=openpyxl.styles.Side(style='thin')
                    )
                    # تنسيق العمود الأول (التسميات)
                    if cell.column == 1:
                        cell.font = openpyxl.styles.Font(bold=True)
                        cell.fill = openpyxl.styles.PatternFill(start_color="E0E0E0", end_color="E0E0E0",
                                                                fill_type="solid")

            # ضبط عرض الأعمدة
            column_widths = {'A': 20, 'B': 15, 'C': 15, 'D': 15, 'E': 15}
            for col_letter, width in column_widths.items():
                stats_sheet.column_dimensions[col_letter].width = width

            # تنسيق صفحة التفاصيل
            details_sheet = workbook['التفاصيل']
            details_sheet.sheet_view.rightToLeft = True

            # إضافة العنوان الرئيسي
            details_sheet.merge_cells('A1:D1')
            details_sheet['A1'] = f"إيضاح و ملاحظات التكميل ليوم {day_arabic} و تاريخ {date_formatted}"
            details_sheet['A1'].font = openpyxl.styles.Font(bold=True, size=14)
            details_sheet['A1'].alignment = openpyxl.styles.Alignment(horizontal="center", vertical="center",
                                                                      wrap_text=True)
            details_sheet['A1'].fill = openpyxl.styles.PatternFill(start_color="E0E0E0", end_color="E0E0E0",
                                                                   fill_type="solid")

            # تنسيق الرؤوس
            for row in details_sheet['A3:D3']:
                for cell in row:
                    cell.font = openpyxl.styles.Font(bold=True, size=12)
                    cell.fill = openpyxl.styles.PatternFill(start_color="4CAF50", end_color="4CAF50", fill_type="solid")
                    cell.font = openpyxl.styles.Font(bold=True, color="FFFFFF", size=12)
                    cell.alignment = openpyxl.styles.Alignment(horizontal="center", vertical="center")
                    cell.border = openpyxl.styles.Border(
                        left=openpyxl.styles.Side(style='thin'),
                        right=openpyxl.styles.Side(style='thin'),
                        top=openpyxl.styles.Side(style='thin'),
                        bottom=openpyxl.styles.Side(style='thin')
                    )

            # تنسيق البيانات
            for row in details_sheet.iter_rows(min_row=4, max_row=details_sheet.max_row, min_col=1, max_col=4):
                for cell in row:
                    cell.alignment = openpyxl.styles.Alignment(horizontal="center", vertical="center")
                    cell.border = openpyxl.styles.Border(
                        left=openpyxl.styles.Side(style='thin'),
                        right=openpyxl.styles.Side(style='thin'),
                        top=openpyxl.styles.Side(style='thin'),
                        bottom=openpyxl.styles.Side(style='thin')
                    )

            # ضبط عرض الأعمدة
            details_sheet.column_dimensions['A'].width = 10
            details_sheet.column_dimensions['B'].width = 30
            details_sheet.column_dimensions['C'].width = 20
            details_sheet.column_dimensions['D'].width = 25

        messagebox.showinfo("نجاح", f"تم تصدير التكميل الرسمي ليوم {day_arabic} بنجاح إلى:\n{export_file}")

        # فتح الملف
        try:
            os.startfile(export_file)
        except:
            pass

    except Exception as e:
        messagebox.showerror("خطأ", f"حدث خطأ أثناء تصدير التكميل الرسمي: {str(e)}")


def show_unregistered_students(self):
    """عرض المتدربين الذين لم يتم تسجيلهم في تاريخ معين مع إمكانية التصفية حسب الدورة"""
    # الحصول على التاريخ المحدد
    selected_date = self.date_entry.get_date().strftime("%Y-%m-%d")

    # إنشاء نافذة جديدة
    unregistered_window = tk.Toplevel(self.root)
    unregistered_window.title(f"المتدربين غير المسجلين بتاريخ {selected_date}")
    unregistered_window.geometry("800x600")
    unregistered_window.configure(bg=self.colors["light"])

    # توسيط النافذة
    x = (unregistered_window.winfo_screenwidth() - 800) // 2
    y = (unregistered_window.winfo_screenheight() - 600) // 2
    unregistered_window.geometry(f"800x600+{x}+{y}")

    # عنوان النافذة
    tk.Label(
        unregistered_window,
        text=f"المتدربين غير المسجلين بتاريخ {selected_date}",
        font=self.fonts["title"],
        bg=self.colors["primary"],
        fg="white",
        padx=10, pady=10
    ).pack(fill=tk.X)

    # إطار اختيار الدورة
    filter_frame = tk.Frame(unregistered_window, bg=self.colors["light"], padx=10, pady=10)
    filter_frame.pack(fill=tk.X)

    tk.Label(
        filter_frame,
        text="اختر الدورة:",
        font=self.fonts["text_bold"],
        bg=self.colors["light"]
    ).pack(side=tk.RIGHT, padx=10)

    # الحصول على قائمة الدورات المتاحة
    cursor = self.conn.cursor()
    cursor.execute("SELECT DISTINCT course FROM trainees WHERE is_excluded=0 ORDER BY course")
    courses = ["جميع الدورات"] + [row[0] for row in cursor.fetchall() if row[0]]

    course_var = tk.StringVar(value="جميع الدورات")
    course_combo = ttk.Combobox(
        filter_frame,
        textvariable=course_var,
        values=courses,
        state="readonly",
        width=30,
        font=self.fonts["text"]
    )
    course_combo.pack(side=tk.RIGHT, padx=5)

    # متغيرات التصفح المحدود
    page_size = 100
    current_page = 1

    # زر تطبيق التصفية
    filter_btn = tk.Button(
        filter_frame,
        text="تطبيق",
        font=self.fonts["text_bold"],
        bg=self.colors["primary"],
        fg="white",
        padx=10, pady=5,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=lambda: load_students(1)  # عند تغيير الدورة، ابدأ من الصفحة الأولى
    )
    filter_btn.pack(side=tk.LEFT, padx=5)

    # إطار النتائج والتصفح
    result_frame = tk.Frame(unregistered_window, bg=self.colors["light"], padx=10, pady=10)
    result_frame.pack(fill=tk.BOTH, expand=True)

    # إطار القائمة
    list_frame = tk.Frame(result_frame, bg=self.colors["light"])
    list_frame.pack(fill=tk.BOTH, expand=True)

    # شريط التمرير للقائمة
    list_scroll = tk.Scrollbar(list_frame)
    list_scroll.pack(side=tk.RIGHT, fill=tk.Y)

    # إنشاء قائمة المتدربين
    students_tree = ttk.Treeview(
        list_frame,
        columns=("id", "name", "rank", "course"),
        show="headings",
        yscrollcommand=list_scroll.set,
        style="Bold.Treeview"
    )

    # تعريف أعمدة الجدول
    students_tree.column("id", width=120, anchor=tk.CENTER)
    students_tree.column("name", width=200, anchor=tk.CENTER)
    students_tree.column("rank", width=100, anchor=tk.CENTER)
    students_tree.column("course", width=150, anchor=tk.CENTER)

    # تعريف عناوين الأعمدة
    students_tree.heading("id", text="رقم الهوية")
    students_tree.heading("name", text="الاسم")
    students_tree.heading("rank", text="الرتبة")
    students_tree.heading("course", text="اسم الدورة")

    students_tree.pack(fill=tk.BOTH, expand=True)
    list_scroll.config(command=students_tree.yview)

    # متغير لحفظ ملصق عدد المتدربين
    students_count_var = tk.StringVar(value="إجمالي عدد المتدربين غير المسجلين: 0")
    students_count_label = tk.Label(
        result_frame,
        textvariable=students_count_var,
        font=self.fonts["text_bold"],
        bg=self.colors["light"],
        fg=self.colors["primary"],
        pady=5
    )
    students_count_label.pack(fill=tk.X)

    # إطار أزرار التصفح
    pagination_frame = tk.Frame(result_frame, bg=self.colors["light"])
    pagination_frame.pack(fill=tk.X, pady=5)

    # عناصر التصفح
    prev_btn = tk.Button(
        pagination_frame,
        text="السابق",
        font=self.fonts["text_bold"],
        bg=self.colors["secondary"],
        fg="white",
        padx=10, pady=2,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=lambda: change_page(-1)
    )
    prev_btn.pack(side=tk.LEFT, padx=5)

    page_var = tk.StringVar(value="الصفحة 1")
    page_label = tk.Label(
        pagination_frame,
        textvariable=page_var,
        font=self.fonts["text_bold"],
        bg=self.colors["light"]
    )
    page_label.pack(side=tk.LEFT, padx=10)

    next_btn = tk.Button(
        pagination_frame,
        text="التالي",
        font=self.fonts["text_bold"],
        bg=self.colors["secondary"],
        fg="white",
        padx=10, pady=2,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=lambda: change_page(1)
    )
    next_btn.pack(side=tk.LEFT, padx=5)

    # زر الإغلاق
    tk.Button(
        unregistered_window,
        text="إغلاق",
        font=self.fonts["text_bold"],
        bg=self.colors["dark"],
        fg="white",
        padx=15, pady=5,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=unregistered_window.destroy
    ).pack(side=tk.BOTTOM, pady=10)

    # متغيرات لتتبع عدد الصفحات والصفحة الحالية
    total_pages = 1

    def change_page(delta):
        """تغيير الصفحة الحالية"""
        nonlocal current_page
        new_page = current_page + delta

        if 1 <= new_page <= total_pages:
            current_page = new_page
            load_students(current_page)

    # دالة لتحميل المتدربين حسب الدورة المحددة والصفحة
    def load_students(page=1):
        nonlocal current_page, total_pages
        current_page = page

        # مسح البيانات الحالية
        for item in students_tree.get_children():
            students_tree.delete(item)

        # إعداد الاستعلام حسب الدورة المحددة
        selected_course = course_var.get()

        # استعلام العدد الإجمالي أولاً
        count_query = ""
        count_params = []

        if selected_course == "جميع الدورات":
            # استعلام لجميع الدورات
            count_query = """
                   SELECT COUNT(*)
                   FROM trainees t
                   WHERE t.is_excluded = 0
                   AND t.national_id NOT IN (
                       SELECT national_id FROM attendance WHERE date = ?
                   )
               """
            count_params = [selected_date]
        else:
            # استعلام للدورة المحددة فقط
            count_query = """
                   SELECT COUNT(*)
                   FROM trainees t
                   WHERE t.is_excluded = 0
                   AND t.course = ?
                   AND t.national_id NOT IN (
                       SELECT national_id FROM attendance WHERE date = ?
                   )
               """
            count_params = [selected_course, selected_date]

        # تنفيذ استعلام العدد
        cursor.execute(count_query, count_params)
        total_count = cursor.fetchone()[0]

        # حساب عدد الصفحات
        total_pages = max(1, (total_count + page_size - 1) // page_size)

        # تحديث متغيرات التصفح
        page_var.set(f"الصفحة {current_page} من {total_pages}")
        students_count_var.set(f"إجمالي عدد المتدربين غير المسجلين: {total_count}")

        # بناء استعلام المتدربين مع حدود الصفحة
        offset = (current_page - 1) * page_size

        query = ""
        params = []

        if selected_course == "جميع الدورات":
            query = """
                   SELECT t.national_id, t.name, t.rank, t.course
                   FROM trainees t
                   WHERE t.is_excluded = 0
                   AND t.national_id NOT IN (
                       SELECT national_id FROM attendance WHERE date = ?
                   )
                   ORDER BY t.course, t.name
                   LIMIT ? OFFSET ?
               """
            params = [selected_date, page_size, offset]
        else:
            query = """
                   SELECT t.national_id, t.name, t.rank, t.course
                   FROM trainees t
                   WHERE t.is_excluded = 0
                   AND t.course = ?
                   AND t.national_id NOT IN (
                       SELECT national_id FROM attendance WHERE date = ?
                   )
                   ORDER BY t.name
                   LIMIT ? OFFSET ?
               """
            params = [selected_course, selected_date, page_size, offset]

        # تنفيذ الاستعلام
        cursor.execute(query, params)
        unregistered_students = cursor.fetchall()

        # إضافة المتدربين إلى القائمة
        for student in unregistered_students:
            students_tree.insert("", tk.END, values=student)

    # تحميل البيانات عند فتح النافذة
    load_students()


def show_top_absence_statistics(self):
    """عرض المتدربين الأكثر غياباً وتأخراً وغياباً بعذر"""
    stats_window = tk.Toplevel(self.root)
    stats_window.title("إحصائيات أعلى معدلات الغياب والتأخير")
    stats_window.geometry("900x650")
    stats_window.configure(bg=self.colors["light"])
    stats_window.transient(self.root)
    stats_window.grab_set()

    # توسيط النافذة
    x = (stats_window.winfo_screenwidth() - 900) // 2
    y = (stats_window.winfo_screenheight() - 650) // 2
    stats_window.geometry(f"900x650+{x}+{y}")

    # إطار العنوان
    header_frame = tk.Frame(stats_window, bg=self.colors["primary"], padx=20, pady=15)
    header_frame.pack(fill=tk.X)

    header_label = tk.Label(
        header_frame,
        text="إحصائيات أعلى معدلات الغياب والتأخير",
        font=("Tajawal", 18, "bold"),
        bg=self.colors["primary"],
        fg="white"
    )
    header_label.pack()

    # إطار التحكم
    control_frame = tk.Frame(stats_window, bg=self.colors["light"], padx=20, pady=10)
    control_frame.pack(fill=tk.X)

    tk.Label(
        control_frame,
        text="عدد المتدربين المراد عرضهم:",
        font=self.fonts["text_bold"],
        bg=self.colors["light"]
    ).pack(side=tk.RIGHT, padx=5)

    limit_var = tk.StringVar(value="10")
    limit_combobox = ttk.Combobox(
        control_frame,
        textvariable=limit_var,
        values=["5", "10", "15", "20", "25", "50"],
        state="readonly",
        width=5,
        font=self.fonts["text"]
    )
    limit_combobox.pack(side=tk.RIGHT, padx=5)

    tk.Label(
        control_frame,
        text="تصفية حسب الدورة:",
        font=self.fonts["text_bold"],
        bg=self.colors["light"]
    ).pack(side=tk.RIGHT, padx=5)

    # الحصول على قائمة الدورات
    cursor = self.conn.cursor()
    cursor.execute("SELECT DISTINCT course FROM trainees WHERE course IS NOT NULL AND course != '' ORDER BY course")
    courses = ["جميع الدورات"] + [row[0] for row in cursor.fetchall()]

    course_var = tk.StringVar(value="جميع الدورات")
    course_combobox = ttk.Combobox(
        control_frame,
        textvariable=course_var,
        values=courses,
        state="readonly",
        width=20,
        font=self.fonts["text"]
    )
    course_combobox.pack(side=tk.RIGHT, padx=5)

    refresh_button = tk.Button(
        control_frame,
        text="تحديث البيانات",
        font=self.fonts["text_bold"],
        bg=self.colors["success"],
        fg="white",
        padx=10, pady=5,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=lambda: load_statistics()
    )
    refresh_button.pack(side=tk.LEFT, padx=5)

    export_button = tk.Button(
        control_frame,
        text="تصدير البيانات",
        font=self.fonts["text_bold"],
        bg=self.colors["secondary"],
        fg="white",
        padx=10, pady=5,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=lambda: export_statistics()
    )
    export_button.pack(side=tk.LEFT, padx=5)

    # إطار التبويب الرئيسي
    tab_control = ttk.Notebook(stats_window)
    tab_control.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

    # إنشاء التبويبات الثلاثة
    tab_absence = tk.Frame(tab_control, bg=self.colors["light"])
    tab_lateness = tk.Frame(tab_control, bg=self.colors["light"])
    tab_excused = tk.Frame(tab_control, bg=self.colors["light"])

    tab_control.add(tab_absence, text="أعلى معدلات الغياب")
    tab_control.add(tab_lateness, text="أعلى معدلات التأخير")
    tab_control.add(tab_excused, text="أعلى معدلات الغياب بعذر")

    # إنشاء جداول العرض
    absence_tree = self.create_stats_tree(tab_absence)
    lateness_tree = self.create_stats_tree(tab_lateness)
    excused_tree = self.create_stats_tree(tab_excused)

    # دالة تحميل البيانات
    def load_statistics():
        limit = int(limit_var.get())
        course_filter = course_var.get()

        # مسح البيانات الحالية
        for tree in [absence_tree, lateness_tree, excused_tree]:
            for item in tree.get_children():
                tree.delete(item)

        # إعداد شرط الدورة
        course_condition = ""
        course_params = []

        if course_filter != "جميع الدورات":
            course_condition = "AND t.course = ?"
            course_params = [course_filter]

        # استعلام الغياب
        query_absence = f"""
           SELECT t.national_id, t.name, t.rank, t.course, COUNT(*) as count
           FROM attendance a
           JOIN trainees t ON a.national_id = t.national_id
           WHERE a.status = 'غائب' AND t.is_excluded = 0 {course_condition}
           GROUP BY t.national_id
           ORDER BY count DESC
           LIMIT ?
           """

        # استعلام التأخير
        query_lateness = f"""
           SELECT t.national_id, t.name, t.rank, t.course, COUNT(*) as count
           FROM attendance a
           JOIN trainees t ON a.national_id = t.national_id
           WHERE a.status = 'متأخر' AND t.is_excluded = 0 {course_condition}
           GROUP BY t.national_id
           ORDER BY count DESC
           LIMIT ?
           """

        # استعلام الغياب بعذر
        query_excused = f"""
           SELECT t.national_id, t.name, t.rank, t.course, COUNT(*) as count
           FROM attendance a
           JOIN trainees t ON a.national_id = t.national_id
           WHERE a.status = 'غائب بعذر' AND t.is_excluded = 0 {course_condition}
           GROUP BY t.national_id
           ORDER BY count DESC
           LIMIT ?
           """

        # تنفيذ الاستعلامات وعرض البيانات
        cursor = self.conn.cursor()

        # الغياب
        cursor.execute(query_absence, course_params + [limit])
        result_absence = cursor.fetchall()
        for i, row in enumerate(result_absence):
            national_id, name, rank, course, count = row
            absence_tree.insert("", tk.END, values=(i + 1, national_id, name, rank, course, count,
                                                    f"{(count / self.get_total_days(national_id) * 100):.1f}%"))

        # التأخير
        cursor.execute(query_lateness, course_params + [limit])
        result_lateness = cursor.fetchall()
        for i, row in enumerate(result_lateness):
            national_id, name, rank, course, count = row
            lateness_tree.insert("", tk.END, values=(i + 1, national_id, name, rank, course, count,
                                                     f"{(count / self.get_total_days(national_id) * 100):.1f}%"))

        # الغياب بعذر
        cursor.execute(query_excused, course_params + [limit])
        result_excused = cursor.fetchall()
        for i, row in enumerate(result_excused):
            national_id, name, rank, course, count = row
            excused_tree.insert("", tk.END, values=(i + 1, national_id, name, rank, course, count,
                                                    f"{(count / self.get_total_days(national_id) * 100):.1f}%"))

    # دالة تصدير البيانات
    def export_statistics():
        if not self.current_user["permissions"]["can_export_data"]:
            messagebox.showwarning("تنبيه", "ليس لديك صلاحية تصدير البيانات")
            return

        limit = int(limit_var.get())
        course_filter = course_var.get()

        # اختيار مسار الملف
        export_file = filedialog.asksaveasfilename(
            defaultextension=".xlsx",
            filetypes=[("Excel files", "*.xlsx")],
            initialfile=f"إحصائيات_الغياب_والتأخير.xlsx"
        )

        if not export_file:
            return

        try:
            import pandas as pd
            from pandas import ExcelWriter

            # إعداد شرط الدورة للاستعلامات
            course_condition = ""
            course_params = []

            if course_filter != "جميع الدورات":
                course_condition = "AND t.course = ?"
                course_params = [course_filter]

            # استعلامات الحصول على البيانات
            query_absence = f"""
               SELECT t.national_id, t.name, t.rank, t.course, COUNT(*) as count
               FROM attendance a
               JOIN trainees t ON a.national_id = t.national_id
               WHERE a.status = 'غائب' AND t.is_excluded = 0 {course_condition}
               GROUP BY t.national_id
               ORDER BY count DESC
               LIMIT ?
               """

            query_lateness = f"""
               SELECT t.national_id, t.name, t.rank, t.course, COUNT(*) as count
               FROM attendance a
               JOIN trainees t ON a.national_id = t.national_id
               WHERE a.status = 'متأخر' AND t.is_excluded = 0 {course_condition}
               GROUP BY t.national_id
               ORDER BY count DESC
               LIMIT ?
               """

            query_excused = f"""
               SELECT t.national_id, t.name, t.rank, t.course, COUNT(*) as count
               FROM attendance a
               JOIN trainees t ON a.national_id = t.national_id
               WHERE a.status = 'غائب بعذر' AND t.is_excluded = 0 {course_condition}
               GROUP BY t.national_id
               ORDER BY count DESC
               LIMIT ?
               """

            cursor = self.conn.cursor()

            # استخراج البيانات من قاعدة البيانات
            cursor.execute(query_absence, course_params + [limit])
            absence_data = cursor.fetchall()

            cursor.execute(query_lateness, course_params + [limit])
            lateness_data = cursor.fetchall()

            cursor.execute(query_excused, course_params + [limit])
            excused_data = cursor.fetchall()

            # تحويل البيانات إلى DataFrame
            columns = ["رقم الهوية", "الاسم", "الرتبة", "الدورة", "عدد أيام الغياب", "النسبة المئوية"]

            # دالة مساعدة لإضافة النسبة المئوية
            def add_percentage(data_list):
                result = []
                for row in data_list:
                    national_id, name, rank, course, count = row
                    total_days = self.get_total_days(national_id)
                    percentage = f"{(count / total_days * 100):.1f}%" if total_days > 0 else "0%"
                    result.append([national_id, name, rank, course, count, percentage])
                return result

            df_absence = pd.DataFrame(add_percentage(absence_data), columns=columns)
            df_lateness = pd.DataFrame(add_percentage(lateness_data), columns=columns)
            df_excused = pd.DataFrame(add_percentage(excused_data), columns=columns)

            # تصدير البيانات إلى Excel
            with ExcelWriter(export_file) as writer:
                df_absence.to_excel(writer, sheet_name="أعلى معدلات الغياب", index=False)
                df_lateness.to_excel(writer, sheet_name="أعلى معدلات التأخير", index=False)
                df_excused.to_excel(writer, sheet_name="أعلى معدلات الغياب بعذر", index=False)

            messagebox.showinfo("نجاح", f"تم تصدير البيانات بنجاح إلى:\n{export_file}")

        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء تصدير البيانات: {str(e)}")

    # زر الإغلاق
    close_button = tk.Button(
        stats_window,
        text="إغلاق",
        font=self.fonts["text_bold"],
        bg=self.colors["dark"],
        fg="white",
        padx=20, pady=5,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=stats_window.destroy
    )
    close_button.pack(pady=10)

    # تحميل البيانات مبدئياً
    load_statistics()


def create_stats_tree(self, parent_frame):
    """إنشاء جدول عرض إحصائيات"""
    # إنشاء إطار للجدول مع شريط تمرير
    tree_frame = tk.Frame(parent_frame, bg=self.colors["light"])
    tree_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)

    scrollbar = tk.Scrollbar(tree_frame)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    tree = ttk.Treeview(
        tree_frame,
        columns=("rank", "id", "name", "grade", "course", "count", "percentage"),
        show="headings",
        yscrollcommand=scrollbar.set,
        style="Bold.Treeview"
    )

    # تعريف الأعمدة
    tree.column("rank", width=50, anchor=tk.CENTER)
    tree.column("id", width=120, anchor=tk.CENTER)
    tree.column("name", width=180, anchor=tk.CENTER)
    tree.column("grade", width=100, anchor=tk.CENTER)
    tree.column("course", width=150, anchor=tk.CENTER)
    tree.column("count", width=80, anchor=tk.CENTER)
    tree.column("percentage", width=100, anchor=tk.CENTER)

    # عناوين الأعمدة
    tree.heading("rank", text="الترتيب")
    tree.heading("id", text="رقم الهوية")
    tree.heading("name", text="الاسم")
    tree.heading("grade", text="الرتبة")
    tree.heading("course", text="الدورة")
    tree.heading("count", text="عدد المرات")
    tree.heading("percentage", text="النسبة")

    tree.pack(fill=tk.BOTH, expand=True)
    scrollbar.config(command=tree.yview)

    return tree


def get_total_days(self, national_id):
    """حساب إجمالي عدد أيام الدورة للمتدرب"""
    cursor = self.conn.cursor()
    cursor.execute("""
           SELECT COUNT(DISTINCT date) 
           FROM attendance 
           WHERE national_id=?
       """, (national_id,))
    total = cursor.fetchone()[0]
    return total if total > 0 else 1  # لتجنب القسمة على صفر


def export_based_on_filter(self):
    if not self.current_user["permissions"]["can_export_data"]:
        messagebox.showwarning("تنبيه", "ليس لديك صلاحية تصدير البيانات")
        return

    status_value = self.status_filter_var.get()
    if status_value == "الكل":
        self.export_filtered_records(None)
    else:
        self.export_filtered_records(status_value)


def update_attendance_display(self):
    # تحديد حجم الصفحة
    self.page_size = 100  # عدد السجلات في الصفحة الواحدة
    self.current_page = 1 if not hasattr(self, 'current_page') else self.current_page

    # مسح البيانات الحالية
    for row in self.attendance_tree.get_children():
        self.attendance_tree.delete(row)

    date_str = self.log_date_entry.get_date().strftime("%Y-%m-%d")
    search_text = self.log_search_var.get().strip()
    status_filter_val = self.status_filter_var.get()

    # بناء الاستعلام مع تصفية
    query = """
           SELECT a.national_id, a.name, a.rank, a.course, a.status,
                  a.updated_by, a.updated_at
           FROM attendance a
           JOIN trainees t ON a.national_id = t.national_id
           WHERE a.date=? AND t.is_excluded=0
       """
    params = [date_str]

    # إضافة شرط التصفية حسب الحالة
    if status_filter_val != "الكل":
        query += " AND a.status=?"
        params.append(status_filter_val)

    # إضافة شرط البحث
    if search_text:
        query += " AND (a.national_id LIKE ? OR a.name LIKE ?)"
        params.extend([f'%{search_text}%', f'%{search_text}%'])

    # الحصول على إجمالي عدد النتائج
    count_query = f"SELECT COUNT(*) FROM ({query}) AS filtered_results"
    cursor = self.conn.cursor()
    cursor.execute(count_query, params)
    total_records = cursor.fetchone()[0]

    # تحديد عدد الصفحات
    total_pages = max(1, (total_records + self.page_size - 1) // self.page_size)

    # إضافة حدود الصفحة الحالية
    limit_offset = f" LIMIT {self.page_size} OFFSET {(self.current_page - 1) * self.page_size}"
    query += limit_offset

    # تنفيذ الاستعلام
    cursor.execute(query, params)
    results = cursor.fetchall()

    # إظهار النتائج والمعلومات الإضافية
    for row in results:
        national_id = row[0]

        # الحصول على إحصائيات المتدرب
        all_absences = self.get_all_absences_count(national_id)
        all_lates = self.get_all_late_count(national_id)
        all_excused = self.get_all_excused_count(national_id)

        # إضافة قيمة checkbox فارغة كأول عنصر
        checkbox_value = ""
        values = [checkbox_value] + list(row[0:5]) + [all_absences, all_lates, all_excused]

        # إضافة معلومات التعديل إذا كان المستخدم مصرح له
        if self.current_user["permissions"]["can_view_edit_history"]:
            values.extend([row[5] if row[5] else "", row[6] if row[6] else ""])

        item_id = self.attendance_tree.insert("", tk.END, values=values)

        # تطبيق لون الخلفية حسب الحالة
        status = row[4]
        self.apply_status_color(item_id, status)

    # إضافة أزرار التنقل بين الصفحات
    self.create_pagination_controls(total_pages)


def create_pagination_controls(self, total_pages):
    """إنشاء أزرار التنقل بين الصفحات"""
    # إزالة أزرار التنقل الحالية إن وجدت
    if hasattr(self, 'pagination_frame'):
        self.pagination_frame.destroy()

    # لا داعي لعرض أزرار التنقل إذا كانت هناك صفحة واحدة فقط
    if total_pages <= 1:
        return

    # إنشاء إطار لأزرار التنقل
    self.pagination_frame = tk.Frame(self.attendance_log_tab, bg=self.colors["light"])
    self.pagination_frame.pack(fill=tk.X, padx=10, pady=5)

    # إضافة زر الصفحة السابقة
    prev_btn = tk.Button(
        self.pagination_frame,
        text="السابق",
        font=self.fonts["text_bold"],
        bg=self.colors["secondary"],
        fg="white",
        padx=10, pady=2,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=lambda: self.change_page(-1, total_pages)
    )
    prev_btn.pack(side=tk.RIGHT, padx=5)

    # إضافة لابل لعرض رقم الصفحة الحالية
    self.page_label = tk.Label(
        self.pagination_frame,
        text=f"الصفحة {self.current_page} من {total_pages}",
        font=self.fonts["text_bold"],
        bg=self.colors["light"]
    )
    self.page_label.pack(side=tk.RIGHT, padx=10)

    # إضافة زر الصفحة التالية
    next_btn = tk.Button(
        self.pagination_frame,
        text="التالي",
        font=self.fonts["text_bold"],
        bg=self.colors["secondary"],
        fg="white",
        padx=10, pady=2,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=lambda: self.change_page(1, total_pages)
    )
    next_btn.pack(side=tk.RIGHT, padx=5)


def change_page(self, delta, total_pages):
    """تغيير الصفحة الحالية والتحديث"""
    new_page = self.current_page + delta

    # التأكد من أن الصفحة الجديدة ضمن النطاق المسموح
    if 1 <= new_page <= total_pages:
        self.current_page = new_page
        self.update_attendance_display()


def apply_status_color(self, item_id, status):
    """تطبيق لون مناسب حسب حالة الحضور"""
    if status == "حاضر":
        self.attendance_tree.item(item_id, tags=("present",))
    elif status == "متأخر":
        self.attendance_tree.item(item_id, tags=("late",))
    elif status == "غائب بعذر":
        self.attendance_tree.item(item_id, tags=("excused",))
    elif status == "لم يباشر":
        self.attendance_tree.item(item_id, tags=("not_started",))
    elif status == "تطبيق ميداني":
        self.attendance_tree.item(item_id, tags=("field_application",))
    elif status == "يوم طالب":
        self.attendance_tree.item(item_id, tags=("student_day",))
    elif status == "مسائية / عن بعد":
        self.attendance_tree.item(item_id, tags=("evening_remote",))
    elif status == "حالة وفاة":
        self.attendance_tree.item(item_id, tags=("death_case",))
    elif status == "منوم":
        self.attendance_tree.item(item_id, tags=("hospital",))


def reset_attendance_day(self):
    """إعادة تعيين سجلات حضور اليوم المحدد فقط مع حماية بكلمة مرور للأيام السابقة"""
    if not self.current_user["permissions"]["can_reset_attendance"]:
        messagebox.showwarning("تنبيه", "ليس لديك صلاحية إعادة تعيين سجلات الحضور")
        return

    date_str = self.log_date_entry.get_date().strftime("%Y-%m-%d")
    selected_date = self.log_date_entry.get_date()
    today = datetime.datetime.now().date()

    # التحقق إذا كان التاريخ المحدد هو يوم سابق
    if selected_date < today:
        # طلب كلمة المرور للأيام السابقة
        password_window = tk.Toplevel(self.root)
        password_window.title("مطلوب كلمة مرور")
        password_window.geometry("350x200")
        password_window.configure(bg=self.colors["light"])
        password_window.transient(self.root)
        password_window.grab_set()

        # توسيط النافذة
        x = (password_window.winfo_screenwidth() - 350) // 2
        y = (password_window.winfo_screenheight() - 200) // 2
        password_window.geometry(f"350x200+{x}+{y}")

        # إطار المحتوى
        content_frame = tk.Frame(password_window, bg=self.colors["light"], padx=20, pady=20)
        content_frame.pack(fill=tk.BOTH, expand=True)

        tk.Label(
            content_frame,
            text="إعادة تعيين يوم سابق يتطلب كلمة مرور",
            font=self.fonts["text_bold"],
            bg=self.colors["light"],
            fg=self.colors["danger"]
        ).pack(pady=(0, 10))

        tk.Label(
            content_frame,
            text=f"التاريخ المحدد: {date_str}",
            font=self.fonts["text"],
            bg=self.colors["light"]
        ).pack(pady=(0, 10))

        tk.Label(
            content_frame,
            text="أدخل كلمة المرور:",
            font=self.fonts["text"],
            bg=self.colors["light"]
        ).pack(anchor=tk.W)

        password_entry = tk.Entry(
            content_frame,
            font=self.fonts["text"],
            show="*",
            width=20
        )
        password_entry.pack(fill=tk.X, pady=(5, 15))
        password_entry.focus_set()

        # متغير للتحكم في النتيجة
        password_correct = [False]

        def check_password():
            entered_password = password_entry.get()
            if entered_password == "20244":
                password_correct[0] = True
                password_window.destroy()
            else:
                messagebox.showerror("خطأ", "كلمة المرور غير صحيحة")
                password_entry.delete(0, tk.END)
                password_entry.focus_set()

        def on_enter(event):
            check_password()

        # ربط مفتاح Enter
        password_entry.bind("<Return>", on_enter)

        # إطار الأزرار
        button_frame = tk.Frame(password_window, bg=self.colors["light"])
        button_frame.pack(fill=tk.X, padx=20, pady=(0, 20))

        confirm_btn = tk.Button(
            button_frame,
            text="تأكيد",
            font=self.fonts["text_bold"],
            bg=self.colors["primary"],
            fg="white",
            padx=15,
            pady=5,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=check_password
        )
        confirm_btn.pack(side=tk.RIGHT, padx=5)

        cancel_btn = tk.Button(
            button_frame,
            text="إلغاء",
            font=self.fonts["text_bold"],
            bg=self.colors["danger"],
            fg="white",
            padx=15,
            pady=5,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=password_window.destroy
        )
        cancel_btn.pack(side=tk.LEFT, padx=5)

        # انتظار إغلاق النافذة
        password_window.wait_window()

        # التحقق من صحة كلمة المرور
        if not password_correct[0]:
            return

    # تأكيد العملية
    if messagebox.askyesno("تأكيد", f"سيتم حذف كل سجلات الحضور بتاريخ {date_str}، هل أنت متأكد؟"):
        try:
            with self.conn:
                # حذف السجلات
                self.conn.execute("DELETE FROM attendance WHERE date=?", (date_str,))

                # تسجيل العملية في سجل النشاطات (إذا كان موجوداً)
                try:
                    current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    self.conn.execute("""
                           INSERT INTO activity_log (event_type, description, user, timestamp)
                           VALUES (?, ?, ?, ?)
                       """, (
                        "إعادة تعيين",
                        f"تم إعادة تعيين سجلات يوم {date_str}",
                        self.current_user["full_name"],
                        current_time
                    ))
                except:
                    pass  # تجاهل إذا لم يكن جدول السجل موجوداً

            messagebox.showinfo("نجاح", f"تم حذف السجلات بتاريخ {date_str}")
            self.update_attendance_display()
            self.update_statistics()

        except Exception as e:
            messagebox.showerror("خطأ", str(e))


def export_filtered_records(self, status_value):
    if not self.current_user["permissions"]["can_export_data"]:
        messagebox.showwarning("تنبيه", "ليس لديك صلاحية تصدير البيانات")
        return

    date_str = self.log_date_entry.get_date().strftime("%Y-%m-%d")
    query = """
           SELECT
               a.national_id as 'رقم الهوية',
               a.name as 'الاسم',
               a.rank as 'الرتبة',
               a.course as 'اسم الدورة',
               a.time as 'وقت التسجيل',
               a.date as 'التاريخ',
               a.status as 'الحالة',
               a.registered_by as 'سجّل بواسطة',
               a.excuse_reason as 'السبب'
       """

    if self.current_user["permissions"]["can_view_edit_history"]:
        query += """,
               a.updated_by as 'آخر من عدّل',
               a.updated_at as 'وقت آخر تعديل'
           """

    query += """
           FROM attendance a
           JOIN trainees t ON a.national_id = t.national_id
           WHERE a.date=? AND t.is_excluded=0
       """

    params = [date_str]
    if status_value is not None:
        query += " AND a.status=?"
        params.append(status_value)

    df = pd.read_sql(query, self.conn, params=params)
    if df.empty:
        stxt = "الكل" if (status_value is None) else status_value
        messagebox.showinfo("ملاحظة", f"لا توجد بيانات {stxt} في هذا اليوم.")
        return

    stxt = "الكل" if (status_value is None) else status_value
    export_file = filedialog.asksaveasfilename(
        defaultextension=".xlsx",
        filetypes=[("Excel files", "*.xlsx")],
        initialfile=f"{stxt}_{date_str}.xlsx"
    )
    if not export_file:
        return

    try:
        df.to_excel(export_file, index=False)
        messagebox.showinfo("نجاح", f"تم تصدير {stxt} إلى الملف: {export_file}")
    except Exception as e:
        messagebox.showerror("خطأ", str(e))


def on_attendance_double_click(self, event=None):
    if not self.current_user["permissions"]["can_edit_attendance"]:
        messagebox.showwarning("تنبيه", "ليس لديك صلاحية تعديل سجلات الحضور")
        return

    item = self.attendance_tree.selection()
    if not item:
        return
    values = self.attendance_tree.item(item, "values")
    if not values:
        return

    national_id = values[1]
    date_str = self.log_date_entry.get_date().strftime("%Y-%m-%d")

    # التحقق من عمر السجل
    record_date = datetime.datetime.strptime(date_str, "%Y-%m-%d").date()
    today = datetime.datetime.now().date()
    days_diff = (today - record_date).days

    # إذا مضى أكثر من يوم
    if days_diff > 0:
        # التحقق من الصلاحية
        can_edit_old = self.current_user["permissions"].get("can_edit_old_attendance", False)
        is_admin = self.current_user["username"] == "admin"

        # إذا لم يكن admin وليس لديه صلاحية
        if not is_admin and not can_edit_old:
            messagebox.showwarning("تنبيه",
                                   "لا يمكن تعديل حالة المتدرب\nالرجاء الاتصال بالضابط المسؤول لأخذ التوجيه")
            return

    attendance_id = self.get_attendance_record_id(national_id, date_str)
    if not attendance_id:
        messagebox.showinfo("خطأ", "لا يمكن العثور على سجل الحضور المحدد.")
        return
    self.open_edit_attendance_window(attendance_id, values)


def get_attendance_record_id(self, national_id, date_str):
    cursor = self.conn.cursor()
    cursor.execute("SELECT id FROM attendance WHERE national_id=? AND date=?", (national_id, date_str))
    result = cursor.fetchone()
    return result[0] if result else None

    # تعديل كامل لدالة open_edit_attendance_window


def open_edit_attendance_window(self, attendance_id, row_values):
    if not self.current_user["permissions"]["can_edit_attendance"]:
        messagebox.showwarning("تنبيه", "ليس لديك صلاحية تعديل سجلات الحضور")
        return

    # الحصول على الحالة الأصلية والسبب الحالي للمتدرب
    cursor = self.conn.cursor()
    cursor.execute("SELECT original_status, excuse_reason FROM attendance WHERE id=?", (attendance_id,))
    result = cursor.fetchone()
    original_status = result[0]
    current_excuse_reason = result[1] if result[1] else ""

    edit_window = tk.Toplevel(self.root)
    edit_window.title("تعديل حالة الحضور")
    edit_window.geometry("500x550")  # زيادة ارتفاع النافذة
    edit_window.configure(bg=self.colors["light"])
    edit_window.transient(self.root)
    edit_window.grab_set()

    x = (edit_window.winfo_screenwidth() - 500) // 2
    y = (edit_window.winfo_screenheight() - 550) // 2
    edit_window.geometry(f"500x550+{x}+{y}")

    tk.Label(edit_window, text="تعديل حالة الحضور", font=self.fonts["title"], bg=self.colors["primary"],
             fg="white", padx=10, pady=10, width=500).pack(fill=tk.X)

    info_frame = tk.Frame(edit_window, bg=self.colors["light"], padx=20, pady=10)
    info_frame.pack(fill=tk.X)

    tk.Label(info_frame, text=f"المتدرب: {row_values[2]}", font=self.fonts["text_bold"],
             bg=self.colors["light"]).pack(anchor=tk.W)

    tk.Label(info_frame, text=f"الحالة الحالية: {row_values[5]}", font=self.fonts["text"],
             bg=self.colors["light"]).pack(anchor=tk.W)

    tk.Label(info_frame, text=f"الحالة الأصلية: {original_status}", font=self.fonts["text"],
             bg=self.colors["light"]).pack(anchor=tk.W)

    new_status_frame = tk.LabelFrame(edit_window, text="اختر الحالة الجديدة", font=self.fonts["text_bold"],
                                     bg=self.colors["light"], fg=self.colors["dark"], padx=10, pady=10)
    new_status_frame.pack(fill=tk.X, padx=20, pady=10)

    status_options = ["حاضر", "متأخر", "غائب", "غائب بعذر", "لم يباشر", "حالة وفاة", "منوم"]
    status_var = tk.StringVar(value=row_values[5])

    status_combobox = ttk.Combobox(new_status_frame, textvariable=status_var, values=status_options,
                                   state="readonly", font=self.fonts["text"])
    status_combobox.pack(fill=tk.X, padx=5, pady=5)

    # إطار خيارات الغياب بعذر
    excuse_options_frame = tk.Frame(edit_window, bg=self.colors["light"], padx=20, pady=5)

    # إطار للخيارات الافتراضية
    default_excuses_frame = tk.Frame(excuse_options_frame, bg=self.colors["light"])

    excuse_type_var = tk.StringVar(value="إجازة مرضية")

    # الخيارات الأربعة للغياب بعذر
    excuses = [
        ("إجازة مرضية", "إجازة مرضية"),
        ("إجازة أبوة", "إجازة أبوة"),
        ("حضور للمحكمة كشاهد", "حضور للمحكمة كشاهد"),
        ("أخرى", "other")
    ]

    for text, value in excuses:
        tk.Radiobutton(
            default_excuses_frame,
            text=text,
            variable=excuse_type_var,
            value=value,
            font=self.fonts["text"],
            bg=self.colors["light"],
            activebackground=self.colors["light"]
        ).pack(anchor=tk.W, pady=2)

    # إطار لإدخال السبب المخصص
    custom_reason_frame = tk.Frame(excuse_options_frame, bg=self.colors["light"])

    custom_reason_label = tk.Label(
        custom_reason_frame,
        text="أدخل سبب الغياب بعذر:",
        font=self.fonts["text"],
        bg=self.colors["light"]
    )
    custom_reason_entry = tk.Entry(
        custom_reason_frame,
        font=self.fonts["text"],
        width=35
    )

    # خيار الظهور في التكميل الرسمي
    show_in_completion_var = tk.BooleanVar(value=False)
    show_in_completion_check = tk.Checkbutton(
        custom_reason_frame,
        text="هل تريد أن يظهر في التكميل الرسمي؟",
        variable=show_in_completion_var,
        font=self.fonts["text"],
        bg=self.colors["light"],
        activebackground=self.colors["light"]
    )

    def toggle_custom_fields(*args):
        """إظهار/إخفاء حقل السبب المخصص"""
        if excuse_type_var.get() == "other":
            custom_reason_frame.pack(fill=tk.X, pady=5)
            custom_reason_label.pack(anchor=tk.W)
            custom_reason_entry.pack(fill=tk.X, pady=5)
            show_in_completion_check.pack(anchor=tk.W, pady=5)
            custom_reason_entry.focus_set()
        else:
            custom_reason_frame.pack_forget()

    # ربط تغيير الخيار
    excuse_type_var.trace("w", toggle_custom_fields)

    # إطار سبب التعديل
    mod_reason_frame = tk.Frame(edit_window, bg=self.colors["light"], padx=20, pady=5)
    mod_reason_frame.pack(fill=tk.X)

    mod_reason_label = tk.Label(mod_reason_frame, text="سبب التعديل:", font=self.fonts["text"],
                                bg=self.colors["light"])
    mod_reason_entry = tk.Entry(mod_reason_frame, font=self.fonts["text"], width=40)

    def on_status_change(*args):
        # إظهار خيارات الغياب بعذر إذا كانت الحالة "غائب بعذر"
        if status_var.get() == "غائب بعذر":
            excuse_options_frame.pack(fill=tk.X, after=new_status_frame)
            default_excuses_frame.pack(fill=tk.X, pady=5)

            # إذا كان هناك سبب موجود مسبقاً، حاول تحديد الخيار المناسب
            if current_excuse_reason:
                if "إجازة مرضية" in current_excuse_reason:
                    excuse_type_var.set("إجازة مرضية")
                elif "إجازة أبوة" in current_excuse_reason:
                    excuse_type_var.set("إجازة أبوة")
                elif "حضور للمحكمة كشاهد" in current_excuse_reason:
                    excuse_type_var.set("حضور للمحكمة كشاهد")
                else:
                    excuse_type_var.set("other")
                    custom_reason_entry.insert(0, current_excuse_reason.replace("[يظهر في التكميل]", "").replace(
                        "[لا يظهر في التكميل]", "").strip())
                    if "[يظهر في التكميل]" in current_excuse_reason:
                        show_in_completion_var.set(True)

            toggle_custom_fields()
        else:
            excuse_options_frame.pack_forget()

        # إظهار حقل سبب التعديل فقط إذا كانت الحالة الجديدة مختلفة عن الحالة الأصلية
        if status_var.get() != original_status:
            mod_reason_label.pack(anchor=tk.W)
            mod_reason_entry.pack(fill=tk.X, pady=5)
        else:
            mod_reason_label.pack_forget()
            mod_reason_entry.pack_forget()

    status_var.trace("w", on_status_change)
    on_status_change()

    # إطار الأزرار
    button_frame = tk.Frame(edit_window, bg=self.colors["light"], pady=10)
    button_frame.pack(fill=tk.X, padx=20)

    def save_changes():
        new_status = status_var.get()

        # معالجة سبب الغياب بعذر
        new_reason = ""
        if new_status == "غائب بعذر":
            if excuse_type_var.get() == "other":
                custom_text = custom_reason_entry.get().strip()
                if not custom_text:
                    messagebox.showwarning("تنبيه", "الرجاء إدخال سبب الغياب بعذر")
                    return
                if show_in_completion_var.get():
                    new_reason = f"{custom_text} [يظهر في التكميل]"
                else:
                    new_reason = f"{custom_text} [لا يظهر في التكميل]"
            else:
                new_reason = excuse_type_var.get()
        elif new_status in ["حالة وفاة", "منوم"]:
            # الاحتفاظ بالسبب الأصلي للحالات الخاصة
            new_reason = current_excuse_reason
        else:
            new_reason = ""

        modification_reason = mod_reason_entry.get().strip() if new_status != original_status else ""

        # التحقق من عمر السجل
        date_str = self.log_date_entry.get_date().strftime("%Y-%m-%d")
        record_date = datetime.datetime.strptime(date_str, "%Y-%m-%d").date()
        today = datetime.datetime.now().date()
        days_diff = (today - record_date).days

        # إذا مضى أكثر من يوم وليس لديه صلاحية خاصة
        if days_diff > 0:
            # التحقق من الصلاحية
            has_permission = (
                    self.current_user["username"] == "admin" or
                    self.current_user["permissions"].get("can_edit_old_attendance", False) == True
            )

            if not has_permission:
                messagebox.showwarning("تنبيه",
                                       "لا يمكن تعديل حالة المتدرب\nالرجاء الاتصال بالضابط المسؤول لأخذ التوجيه")
                return

        now_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        # الحصول على الحالة القديمة وقيمة receiver_name الحالية
        cursor.execute("SELECT status, receiver_name FROM attendance WHERE id=?", (attendance_id,))
        result = cursor.fetchone()
        old_status = result[0]
        old_receiver = result[1] if result[1] else ""

        # متغير لحفظ اسم المستقبل الجديد
        new_receiver_name = old_receiver

        # التحقق إذا كانت الحالة القديمة "لم يباشر" والجديدة "حاضر" أو "متأخر"
        if old_status == "لم يباشر" and new_status in ["حاضر", "متأخر"]:
            receiver_name = self.get_receiver_name(row_values[2])  # row_values[2] هو اسم المتدرب
            if not receiver_name:
                return
            new_receiver_name = receiver_name

        try:
            with self.conn:
                self.conn.execute("""
                       UPDATE attendance
                       SET status=?, excuse_reason=?,
                           updated_by=?, updated_at=?, modification_reason=?,
                           receiver_name=?
                       WHERE id=?
                   """, (
                    new_status,
                    new_reason,
                    self.current_user["full_name"],
                    now_str,
                    modification_reason,
                    new_receiver_name,
                    attendance_id
                ))

                # تسجيل التعديل التاريخي إذا كان للأيام السابقة
                if days_diff > 0:
                    self.conn.execute("""
                           INSERT INTO historical_edits_log (
                               attendance_id, national_id, student_name, edit_date, 
                               original_date, old_status, new_status, edited_by, 
                               edit_timestamp, days_difference
                           ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                       """, (
                        attendance_id,
                        row_values[1],  # national_id
                        row_values[2],  # student_name
                        datetime.datetime.now().strftime("%Y-%m-%d"),
                        date_str,
                        old_status,
                        new_status,
                        self.current_user["full_name"],
                        now_str,
                        days_diff
                    ))

            messagebox.showinfo("نجاح", "تم تحديث حالة الحضور بنجاح")
            edit_window.destroy()
            self.update_attendance_display()
            self.update_statistics()
        except Exception as e:
            messagebox.showerror("خطأ", str(e))

    def delete_record():
        # التحقق من أن المستخدم هو admin فقط
        if self.current_user["username"] != "admin":
            messagebox.showwarning("تنبيه", "لا يمكنك حذف التسجيل.. يجب تعديل حالته فقط")
            return

        if messagebox.askyesno("تأكيد الحذف",
                               f"هل أنت متأكد من حذف تسجيل المتدرب {row_values[2]} ليوم {self.log_date_entry.get_date().strftime('%Y-%m-%d')}؟\n\nلن يظهر هذا اليوم في سجل المتدرب."):
            try:
                with self.conn:
                    self.conn.execute("DELETE FROM attendance WHERE id=?", (attendance_id,))
                messagebox.showinfo("نجاح", "تم حذف تسجيل المتدرب بنجاح")
                edit_window.destroy()
                self.update_attendance_display()
                self.update_statistics()
            except Exception as e:
                messagebox.showerror("خطأ", str(e))

    # إنشاء الأزرار
    save_btn = tk.Button(button_frame, text="حفظ التغييرات", font=self.fonts["text_bold"],
                         bg=self.colors["success"], fg="white", padx=15, pady=5, bd=0,
                         relief=tk.FLAT, cursor="hand2", command=save_changes)
    save_btn.pack(side=tk.LEFT, padx=5)

    delete_btn = tk.Button(button_frame, text="حذف التسجيل", font=self.fonts["text_bold"],
                           bg="#FF5722", fg="white", padx=15, pady=5, bd=0,
                           relief=tk.FLAT, cursor="hand2", command=delete_record)
    delete_btn.pack(side=tk.LEFT, padx=5)

    cancel_btn = tk.Button(button_frame, text="إلغاء", font=self.fonts["text_bold"],
                           bg=self.colors["danger"], fg="white", padx=15, pady=5, bd=0,
                           relief=tk.FLAT, cursor="hand2", command=edit_window.destroy)
    cancel_btn.pack(side=tk.RIGHT, padx=5)

def add_students_to_existing_course(self):
    """إضافة متدربين جدد لدورة موجودة مع خيار لتعيين الفصل مباشرة"""
    if not self.current_user["permissions"]["can_add_students"]:
        messagebox.showwarning("تنبيه", "ليس لديك صلاحية إضافة متدربين جدد")
        return

    # إنشاء نافذة جديدة
    add_window = tk.Toplevel(self.root)
    add_window.title("إضافة متدربين جدد لدورة موجودة")
    add_window.geometry("800x600")
    add_window.configure(bg=self.colors["light"])
    add_window.transient(self.root)
    add_window.grab_set()

    # توسيط النافذة
    x = (add_window.winfo_screenwidth() - 800) // 2
    y = (add_window.winfo_screenheight() - 600) // 2
    add_window.geometry(f"800x600+{x}+{y}")

    # إضافة عنوان للنافذة
    tk.Label(
        add_window,
        text="إضافة متدربين جدد لدورة موجودة",
        font=self.fonts["title"],
        bg=self.colors["primary"],
        fg="white",
        padx=10, pady=10
    ).pack(fill=tk.X)

    # إطار اختيار الدورة والفصل
    course_frame = tk.Frame(add_window, bg=self.colors["light"], padx=20, pady=10)
    course_frame.pack(fill=tk.X)

    tk.Label(course_frame, text="اختر الدورة:", font=self.fonts["text_bold"], bg=self.colors["light"]).grid(row=0,
                                                                                                            column=3,
                                                                                                            padx=5,
                                                                                                            pady=8,
                                                                                                            sticky=tk.E)

    # الحصول على قائمة الدورات المتاحة
    cursor = self.conn.cursor()
    cursor.execute("SELECT DISTINCT course FROM trainees")
    courses = [row[0] for row in cursor.fetchall() if row[0]]

    course_var = tk.StringVar()
    course_combo = ttk.Combobox(
        course_frame,
        textvariable=course_var,
        values=courses,
        font=self.fonts["text"],
        width=30,
        state="readonly"
    )
    course_combo.grid(row=0, column=2, padx=5, pady=8, sticky=tk.W)

    # إضافة عنصر اختيار الفصل
    tk.Label(course_frame, text="اختر الفصل:", font=self.fonts["text_bold"], bg=self.colors["light"]).grid(row=0,
                                                                                                           column=1,
                                                                                                           padx=5,
                                                                                                           pady=8,
                                                                                                           sticky=tk.E)

    section_var = tk.StringVar()
    section_combo = ttk.Combobox(
        course_frame,
        textvariable=section_var,
        font=self.fonts["text"],
        width=20,
        state="readonly"
    )
    section_combo.grid(row=0, column=0, padx=5, pady=8, sticky=tk.W)

    # دالة لتحديث قائمة الفصول عند اختيار دورة
    def update_sections():
        selected_course = course_var.get()
        if not selected_course:
            section_combo['values'] = []
            section_var.set("")
            return

        # الحصول على قائمة الفصول المتاحة للدورة
        cursor = self.conn.cursor()
        cursor.execute("""
               SELECT section_name FROM course_sections
               WHERE course_name=?
               ORDER BY section_name
           """, (selected_course,))
        sections = [row[0] for row in cursor.fetchall()]

        # لا نضيف خيار "بدون فصل" للقائمة المنسدلة
        section_combo['values'] = sections

        if sections:
            section_combo.current(0)  # اختيار أول فصل كافتراضي
        else:
            # إذا لم تكن هناك فصول، اطلب من المستخدم إنشاء فصل أولاً
            messagebox.showwarning("تنبيه",
                                   "لا توجد فصول لهذه الدورة. الرجاء إنشاء فصل أولاً من خلال 'إدارة الفصول وتصدير الكشوفات'.")
            return

    # ربط وظيفة تحديث الفصول بتغيير الدورة
    course_combo.bind("<<ComboboxSelected>>", lambda e: update_sections())

    # إضافة إطار معلومات المتدربين
    info_frame = tk.Frame(add_window, bg=self.colors["light"], padx=20, pady=5)
    info_frame.pack(fill=tk.X)

    tk.Label(
        info_frame,
        text="معلومات المتدربين المضافين:",
        font=self.fonts["subtitle"],
        bg=self.colors["light"],
        fg=self.colors["primary"]
    ).pack(anchor=tk.W, pady=(0, 10))

    # إطار البحث
    search_frame = tk.Frame(add_window, bg=self.colors["light"])
    search_frame.pack(fill=tk.X, pady=5)

    tk.Label(search_frame, text="بحث بالاسم أو الهوية:", font=self.fonts["text_bold"],
             bg=self.colors["light"]).pack(side=tk.RIGHT, padx=5)

    self.name_search_entry = tk.Entry(search_frame, font=self.fonts["text"], width=30, bd=2, relief=tk.GROOVE)
    self.name_search_entry.pack(side=tk.RIGHT, padx=5, fill=tk.X, expand=True)
    self.name_search_entry.bind("<KeyRelease>", self.dynamic_name_search)

    self.name_listbox = tk.Listbox(add_window, font=self.fonts["text"], height=4,
                                   selectbackground=self.colors["primary"], bd=2, relief=tk.GROOVE)
    self.name_listbox.pack(fill=tk.X, padx=10, pady=(0, 10))
    self.name_listbox.bind("<<ListboxSelect>>", self.on_name_select)

    input_frame = tk.Frame(add_window, bg=self.colors["light"])
    input_frame.pack(fill=tk.X, pady=5)

    self.id_entry = tk.Entry(self.root)

    # تعديل: إضافة إطار للأزرار في الأسفل
    buttons_frame = tk.Frame(add_window, bg=self.colors["light"], pady=20)
    buttons_frame.pack(fill=tk.X, padx=20)

    add_one_btn = tk.Button(
        buttons_frame,
        text="إضافة متدرب واحد",
        font=self.fonts["text_bold"],
        bg=self.colors["success"],
        fg="white",
        padx=10, pady=5,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=lambda: add_single_student(course_var.get(), section_var.get())
    )
    add_one_btn.pack(side=tk.RIGHT, padx=10)

    import_excel_btn = tk.Button(
        buttons_frame,
        text="استيراد من ملف Excel",
        font=self.fonts["text_bold"],
        bg=self.colors["secondary"],
        fg="white",
        padx=10, pady=5,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=lambda: import_from_excel(course_var.get(), section_var.get())
    )
    import_excel_btn.pack(side=tk.RIGHT, padx=10)

    close_btn = tk.Button(
        buttons_frame,
        text="إغلاق",
        font=self.fonts["text_bold"],
        bg=self.colors["dark"],
        fg="white",
        padx=10, pady=5,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=add_window.destroy
    )
    close_btn.pack(side=tk.LEFT, padx=10)

    # دالة إضافة متدرب واحد جديد للدورة
    def add_single_student(course_name, section_name):
        if not course_name:
            messagebox.showwarning("تنبيه", "الرجاء اختيار الدورة أولاً")
            return

        # استخدام نافذة إضافة متدرب موجودة مع إعداد اسم الدورة مسبقاً
        single_window = tk.Toplevel(add_window)
        single_window.title("إضافة متدرب جديد للدورة")
        single_window.geometry("400x350")
        single_window.configure(bg=self.colors["light"])
        single_window.transient(add_window)
        single_window.grab_set()

        x = (single_window.winfo_screenwidth() - 400) // 2
        y = (single_window.winfo_screenheight() - 350) // 2
        single_window.geometry(f"400x350+{x}+{y}")

        tk.Label(
            single_window,
            text=f"إضافة متدرب جديد للدورة: {course_name}",
            font=self.fonts["title"],
            bg=self.colors["primary"],
            fg="white",
            padx=10, pady=10, width=400
        ).pack(fill=tk.X)

        form_frame = tk.Frame(single_window, bg=self.colors["light"], padx=20, pady=20)
        form_frame.pack(fill=tk.BOTH)

        tk.Label(form_frame, text="رقم الهوية:", font=self.fonts["text_bold"], bg=self.colors["light"]).grid(row=0,
                                                                                                             column=1,
                                                                                                             padx=5,
                                                                                                             pady=5,
                                                                                                             sticky=tk.E)
        id_entry = tk.Entry(form_frame, font=self.fonts["text"], width=25)
        id_entry.grid(row=0, column=0, padx=5, pady=5, sticky=tk.W)

        tk.Label(form_frame, text="الاسم:", font=self.fonts["text_bold"], bg=self.colors["light"]).grid(row=1,
                                                                                                        column=1,
                                                                                                        padx=5,
                                                                                                        pady=5,
                                                                                                        sticky=tk.E)
        name_entry = tk.Entry(form_frame, font=self.fonts["text"], width=25)
        name_entry.grid(row=1, column=0, padx=5, pady=5, sticky=tk.W)

        tk.Label(form_frame, text="الرتبة:", font=self.fonts["text_bold"], bg=self.colors["light"]).grid(row=2,
                                                                                                         column=1,
                                                                                                         padx=5,
                                                                                                         pady=5,
                                                                                                         sticky=tk.E)
        rank_entry = tk.Entry(form_frame, font=self.fonts["text"], width=25)
        rank_entry.grid(row=2, column=0, padx=5, pady=5, sticky=tk.W)

        tk.Label(form_frame, text="رقم الجوال:", font=self.fonts["text_bold"], bg=self.colors["light"]).grid(row=3,
                                                                                                             column=1,
                                                                                                             padx=5,
                                                                                                             pady=5,
                                                                                                             sticky=tk.E)
        phone_entry = tk.Entry(form_frame, font=self.fonts["text"], width=25)
        phone_entry.grid(row=3, column=0, padx=5, pady=5, sticky=tk.W)

        button_frame = tk.Frame(single_window, bg=self.colors["light"], pady=10)
        button_frame.pack(fill=tk.X)

        def save_student():
            nid = id_entry.get().strip()
            name = name_entry.get().strip()
            rank_ = rank_entry.get().strip()
            phone = phone_entry.get().strip()
            selected_section = section_name  # الفصل المختار

            if not all([nid, name]):
                messagebox.showwarning("تنبيه", "يجب إدخال رقم الهوية والاسم على الأقل")
                return

            if not selected_section:
                messagebox.showwarning("تنبيه", "يجب اختيار فصل للمتدرب")
                return

            cursor = self.conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM trainees WHERE national_id=?", (nid,))
            exists = cursor.fetchone()[0]

            if exists > 0:
                # التحقق مما إذا كان المتدرب موجود في نفس الدورة
                cursor.execute("SELECT course FROM trainees WHERE national_id=?", (nid,))
                current_course = cursor.fetchone()[0]

                if current_course == course_name:
                    messagebox.showwarning("تنبيه", f"رقم الهوية موجود بالفعل في نفس الدورة: {course_name}")
                    return

                if not messagebox.askyesno("تأكيد الإضافة",
                                           f"المتدرب برقم الهوية {nid} موجود في دورة أخرى: {current_course}\n\nهل تريد نقله من الدورة السابقة إلى الدورة الجديدة: {course_name}؟"):
                    return

                try:
                    # حذف المتدرب من الدورة القديمة
                    with self.conn:
                        # حذف سجلات الحضور للمتدرب
                        self.conn.execute("DELETE FROM attendance WHERE national_id=?", (nid,))
                        # حذف توزيع الفصول السابق
                        self.conn.execute("DELETE FROM student_sections WHERE national_id=?", (nid,))
                        # حذف المتدرب نفسه
                        self.conn.execute("DELETE FROM trainees WHERE national_id=?", (nid,))
                except Exception as e:
                    messagebox.showerror("خطأ", f"حدث خطأ أثناء حذف السجل القديم: {str(e)}")
                    return

            current_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            try:
                with self.conn:
                    # إضافة المتدرب للدورة
                    self.conn.execute("""
                           INSERT INTO trainees (national_id, name, rank, course, phone)
                           VALUES (?, ?, ?, ?, ?)
                       """, (nid, name, rank_, course_name, phone))

                    # إذا تم اختيار فصل (وليس "بدون فصل")، أضف المتدرب إلى الفصل
                    if section_name and section_name != "بدون فصل":
                        self.conn.execute("""
                               INSERT INTO student_sections 
                               (national_id, course_name, section_name, assigned_date)
                               VALUES (?, ?, ?, ?)
                           """, (nid, course_name, section_name, current_date))

                messagebox.showinfo("نجاح", f"تم إضافة المتدرب {name} بنجاح" +
                                    (
                                        f" إلى فصل {section_name}" if section_name and section_name != "بدون فصل" else ""))
                single_window.destroy()
                self.update_students_tree()

            except Exception as e:
                messagebox.showerror("خطأ", str(e))

        save_btn = tk.Button(button_frame, text="حفظ", font=self.fonts["text_bold"], bg=self.colors["success"],
                             fg="white",
                             padx=15, pady=5, bd=0, relief=tk.FLAT, cursor="hand2", command=save_student)
        save_btn.pack(side=tk.LEFT, padx=10)

        cancel_btn = tk.Button(button_frame, text="إلغاء", font=self.fonts["text_bold"], bg=self.colors["danger"],
                               fg="white",
                               padx=15, pady=5, bd=0, relief=tk.FLAT, cursor="hand2", command=single_window.destroy)
        cancel_btn.pack(side=tk.RIGHT, padx=10)

    def import_from_excel(course_name, section_name):
        """استيراد متدربين من ملف Excel مع إضافتهم إلى الفصل المحدد"""
        if not course_name:
            messagebox.showwarning("تنبيه", "الرجاء اختيار الدورة أولاً")
            return

        # اختيار ملف Excel
        file_path = filedialog.askopenfilename(
            title="اختر ملف Excel يحتوي على بيانات المتدربين",
            filetypes=[("Excel files", "*.xlsx"), ("Excel 97-2003", "*.xls"), ("All files", "*.*")]
        )

        if not file_path:
            return

        # التحقق من وجود مكتبة pandas
        try:
            import pandas as pd
        except ImportError:
            messagebox.showerror("خطأ",
                                 "يجب تثبيت مكتبة pandas لاستيراد ملفات Excel. استخدم الأمر: pip install pandas openpyxl")
            return

        try:
            # قراءة الملف
            df = pd.read_excel(file_path)

            # التحقق من وجود الأعمدة المطلوبة
            required_columns = {"national_id", "name"}
            found_columns = set(df.columns)

            # دعم أسماء الأعمدة بالعربية
            arabic_columns = {
                "رقم الهوية": "national_id",
                "الاسم": "name",
                "الرتبة": "rank",
                "رقم الجوال": "phone"
            }

            # تغيير الأسماء العربية إلى إنجليزية إذا وجدت
            rename_dict = {}
            for arabic, english in arabic_columns.items():
                if arabic in df.columns:
                    rename_dict[arabic] = english

            if rename_dict:
                df = df.rename(columns=rename_dict)
                found_columns = set(df.columns)

            missing_columns = required_columns - found_columns
            if missing_columns:
                messagebox.showerror("خطأ",
                                     f"الأعمدة التالية مفقودة في الملف: {', '.join(missing_columns)}\n\nيجب أن يحتوي الملف على عمود 'national_id' (رقم الهوية) وعمود 'name' (الاسم) على الأقل.")
                return

            # إنشاء نافذة تأكيد المعاينة
            preview_window = tk.Toplevel(add_window)
            preview_window.title("معاينة بيانات المتدربين")
            preview_window.geometry("800x600")
            preview_window.configure(bg=self.colors["light"])
            preview_window.transient(add_window)
            preview_window.grab_set()

            tk.Label(
                preview_window,
                text=f"معاينة المتدربين المراد إضافتهم إلى دورة: {course_name}" +
                     (f" - فصل: {section_name}" if section_name and section_name != "بدون فصل" else ""),
                font=self.fonts["title"],
                bg=self.colors["primary"],
                fg="white",
                padx=10, pady=10
            ).pack(fill=tk.X)

            # عرض إحصائيات حول البيانات
            total_records = len(df)
            tk.Label(
                preview_window,
                text=f"إجمالي المتدربين في الملف: {total_records}",
                font=self.fonts["text_bold"],
                bg=self.colors["light"],
                pady=5
            ).pack()

            # إطار لعرض معاينة البيانات
            preview_frame = tk.Frame(preview_window, bg=self.colors["light"])
            preview_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=5)

            preview_scroll = tk.Scrollbar(preview_frame)
            preview_scroll.pack(side=tk.RIGHT, fill=tk.Y)

            # شجرة للمعاينة
            preview_tree = ttk.Treeview(
                preview_frame,
                columns=["id", "national_id", "name", "rank", "phone", "status"],
                show="headings",
                yscrollcommand=preview_scroll.set,
                style="Bold.Treeview"
            )

            preview_tree.column("id", width=50, anchor=tk.CENTER)
            preview_tree.column("national_id", width=150, anchor=tk.CENTER)
            preview_tree.column("name", width=200, anchor=tk.CENTER)
            preview_tree.column("rank", width=100, anchor=tk.CENTER)
            preview_tree.column("phone", width=120, anchor=tk.CENTER)
            preview_tree.column("status", width=150, anchor=tk.CENTER)

            preview_tree.heading("id", text="#")
            preview_tree.heading("national_id", text="رقم الهوية")
            preview_tree.heading("name", text="الاسم")
            preview_tree.heading("rank", text="الرتبة")
            preview_tree.heading("phone", text="رقم الجوال")
            preview_tree.heading("status", text="الحالة")

            preview_tree.pack(fill=tk.BOTH, expand=True)
            preview_scroll.config(command=preview_tree.yview)

            # إضافة الإمكانية لتمييز المتدربين حسب حالتهم
            preview_tree.tag_configure("new", background="#e8f5e9")  # خلفية خضراء فاتحة للمتدربين الجدد
            preview_tree.tag_configure("existing_same",
                                       background="#ffebee")  # خلفية حمراء فاتحة للمتدربين الموجودين في نفس الدورة
            preview_tree.tag_configure("existing_other",
                                       background="#fff8e1")  # خلفية صفراء فاتحة للمتدربين في دورات أخرى

            # العداد للمتدربين حسب حالتهم
            new_students = 0
            existing_same_course = 0
            existing_other_course = 0

            # تحضير بيانات المتدربين للعرض
            student_rows = []

            for i, row in df.iterrows():
                national_id = str(row["national_id"]).strip()
                name = str(row["name"]).strip()

                # إذا كان الصف يحتوي على بيانات فارغة أو غير صالحة، تخطيه
                if not national_id or not name:
                    continue

                rank = str(row.get("rank", "")).strip() if "rank" in row else ""
                phone = str(row.get("phone", "")).strip() if "phone" in row else ""

                # التحقق من وجود المتدرب في قاعدة البيانات
                cursor.execute("SELECT course FROM trainees WHERE national_id=?", (national_id,))
                existing = cursor.fetchone()

                status = ""
                tag = ""

                if existing:
                    existing_course = existing[0]
                    if existing_course == course_name:
                        status = f"موجود بالفعل في دورة: {existing_course}"
                        tag = "existing_same"
                        existing_same_course += 1
                    else:
                        status = f"موجود في دورة أخرى: {existing_course}"
                        tag = "existing_other"
                        existing_other_course += 1
                else:
                    status = "جديد"
                    tag = "new"
                    new_students += 1

                student_rows.append((i + 1, national_id, name, rank, phone, status, tag))

            # إضافة الصفوف إلى الشجرة
            for row in student_rows:
                item_id = preview_tree.insert("", tk.END, values=row[:-1])
                preview_tree.item(item_id, tags=(row[-1],))

            # إضافة ملخص الإحصائيات
            stats_frame = tk.Frame(preview_window, bg=self.colors["light"], padx=20, pady=10)
            stats_frame.pack(fill=tk.X)

            tk.Label(
                stats_frame,
                text=f"متدربين جدد: {new_students}",
                font=self.fonts["text"],
                bg="#e8f5e9", fg="black",
                padx=10, pady=5
            ).pack(side=tk.RIGHT, padx=5)

            tk.Label(
                stats_frame,
                text=f"متدربين موجودون في نفس الدورة: {existing_same_course}",
                font=self.fonts["text"],
                bg="#ffebee", fg="black",
                padx=10, pady=5
            ).pack(side=tk.RIGHT, padx=5)

            tk.Label(
                stats_frame,
                text=f"متدربين موجودون في دورات أخرى: {existing_other_course}",
                font=self.fonts["text"],
                bg="#fff8e1", fg="black",
                padx=10, pady=5
            ).pack(side=tk.RIGHT, padx=5)

            # أزرار التأكيد أو الإلغاء
            button_frame = tk.Frame(preview_window, bg=self.colors["light"], pady=10)
            button_frame.pack(fill=tk.X, padx=10)

            # متغيرات الخيارات
            import_new_var = tk.IntVar(value=1)
            import_other_courses_var = tk.IntVar(value=0)
            import_same_course_var = tk.IntVar(value=0)

            # مربعات الاختيار
            tk.Checkbutton(
                button_frame,
                text="إضافة المتدربين الجدد",
                variable=import_new_var,
                font=self.fonts["text"],
                bg=self.colors["light"]
            ).pack(anchor=tk.W)

            tk.Checkbutton(
                button_frame,
                text="إضافة المتدربين الموجودين في دورات أخرى (سيتم نقلهم)",
                variable=import_other_courses_var,
                font=self.fonts["text"],
                bg=self.colors["light"]
            ).pack(anchor=tk.W)

            tk.Checkbutton(
                button_frame,
                text="تحديث بيانات المتدربين الموجودين في نفس الدورة",
                variable=import_same_course_var,
                font=self.fonts["text"],
                bg=self.colors["light"]
            ).pack(anchor=tk.W)

            # إطار زر التنفيذ
            btn_frame = tk.Frame(preview_window, bg=self.colors["light"], pady=10)
            btn_frame.pack(fill=tk.X, padx=10)

            def execute_import():
                # التحقق من تحديد خيار واحد على الأقل
                if import_new_var.get() == 0 and import_other_courses_var.get() == 0 and import_same_course_var.get() == 0:
                    messagebox.showwarning("تنبيه", "الرجاء تحديد خيار واحد على الأقل للاستيراد")
                    return

                # إنشاء نافذة تقدم العملية
                progress_window = tk.Toplevel(preview_window)
                progress_window.title("استيراد المتدربين")
                progress_window.geometry("400x150")
                progress_window.configure(bg=self.colors["light"])
                progress_window.transient(preview_window)
                progress_window.grab_set()

                tk.Label(
                    progress_window,
                    text="جاري استيراد المتدربين...",
                    font=self.fonts["text_bold"],
                    bg=self.colors["light"],
                    pady=10
                ).pack()

                progress_var = tk.DoubleVar()
                progress_bar = ttk.Progressbar(
                    progress_window,
                    variable=progress_var,
                    maximum=100,
                    length=350
                )
                progress_bar.pack(pady=10)

                status_label = tk.Label(
                    progress_window,
                    text="جاري التحضير...",
                    font=self.fonts["text"],
                    bg=self.colors["light"]
                )
                status_label.pack(pady=5)

                progress_window.update()

                # حساب عدد العمليات المراد تنفيذها
                operations_count = 0
                if import_new_var.get() == 1:
                    operations_count += new_students
                if import_other_courses_var.get() == 1:
                    operations_count += existing_other_course
                if import_same_course_var.get() == 1:
                    operations_count += existing_same_course

                current_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                operations_done = 0
                imported_new = 0
                imported_from_other = 0
                updated_same = 0
                errors = 0

                try:
                    with self.conn:
                        # معالجة المتدربين حسب نوعهم
                        for row_data in student_rows:
                            _, national_id, name, rank, phone, _, tag = row_data

                            # تحديث شريط التقدم
                            progress_var.set((operations_done / max(1, operations_count)) * 100)
                            status_label.config(text=f"معالجة المتدرب: {name}")
                            progress_window.update()

                            # متدربين جدد
                            if tag == "new" and import_new_var.get() == 1:
                                try:
                                    # إضافة المتدرب للدورة
                                    self.conn.execute("""
                                           INSERT INTO trainees (national_id, name, rank, course, phone)
                                           VALUES (?, ?, ?, ?, ?)
                                       """, (national_id, name, rank, course_name, phone))

                                    # إذا تم اختيار فصل (غير "بدون فصل")، أضف المتدرب للفصل
                                    if section_name and section_name != "بدون فصل":
                                        self.conn.execute("""
                                               INSERT INTO student_sections 
                                               (national_id, course_name, section_name, assigned_date)
                                               VALUES (?, ?, ?, ?)
                                           """, (national_id, course_name, section_name, current_date))

                                    imported_new += 1
                                except Exception as e:
                                    print(f"خطأ في إضافة متدرب جديد: {str(e)}")
                                    errors += 1

                            # متدربين من دورات أخرى
                            elif tag == "existing_other" and import_other_courses_var.get() == 1:
                                try:
                                    # حذف سجلات الحضور للمتدرب
                                    self.conn.execute("DELETE FROM attendance WHERE national_id=?", (national_id,))
                                    # حذف توزيع الفصول السابق
                                    self.conn.execute("DELETE FROM student_sections WHERE national_id=?",
                                                      (national_id,))
                                    # تحديث معلومات المتدرب مع الدورة الجديدة
                                    self.conn.execute("""
                                           UPDATE trainees
                                           SET name=?, rank=?, course=?, phone=?
                                           WHERE national_id=?
                                       """, (name, rank, course_name, phone, national_id))

                                    # إذا تم اختيار فصل (غير "بدون فصل")، أضف المتدرب للفصل
                                    if section_name and section_name != "بدون فصل":
                                        self.conn.execute("""
                                               INSERT INTO student_sections 
                                               (national_id, course_name, section_name, assigned_date)
                                               VALUES (?, ?, ?, ?)
                                           """, (national_id, course_name, section_name, current_date))

                                    imported_from_other += 1
                                except Exception as e:
                                    print(f"خطأ في نقل متدرب من دورة أخرى: {str(e)}")
                                    errors += 1

                            # متدربين في نفس الدورة
                            elif tag == "existing_same" and import_same_course_var.get() == 1:
                                try:
                                    # تحديث معلومات المتدرب
                                    self.conn.execute("""
                                           UPDATE trainees
                                           SET name=?, rank=?, phone=?
                                           WHERE national_id=?
                                       """, (name, rank, phone, national_id))

                                    # التحقق مما إذا كان المتدرب موجود في فصل حاليًا
                                    cursor.execute("""
                                           SELECT section_name FROM student_sections
                                           WHERE national_id=? AND course_name=?
                                       """, (national_id, course_name))
                                    current_section = cursor.fetchone()

                                    # إذا اختار المستخدم فصلًا غير "بدون فصل"
                                    if section_name and section_name != "بدون فصل":
                                        if current_section:
                                            # إذا كان المتدرب في فصل مختلف، حدّث الفصل
                                            if current_section[0] != section_name:
                                                self.conn.execute("""
                                                       UPDATE student_sections
                                                       SET section_name=?, assigned_date=?
                                                       WHERE national_id=? AND course_name=?
                                                   """, (section_name, current_date, national_id, course_name))
                                        else:
                                            # إذا لم يكن المتدرب في أي فصل، أضفه إلى الفصل المحدد
                                            self.conn.execute("""
                                                   INSERT INTO student_sections 
                                                   (national_id, course_name, section_name, assigned_date)
                                                   VALUES (?, ?, ?, ?)
                                               """, (national_id, course_name, section_name, current_date))
                                    # إذا اختار المستخدم "بدون فصل" وكان المتدرب في فصل
                                    elif section_name == "بدون فصل" and current_section:
                                        # إزالة المتدرب من الفصل
                                        self.conn.execute("""
                                               DELETE FROM student_sections
                                               WHERE national_id=? AND course_name=?
                                           """, (national_id, course_name))

                                    updated_same += 1
                                except Exception as e:
                                    print(f"خطأ في تحديث متدرب موجود: {str(e)}")
                                    errors += 1

                            operations_done += 1

                    # إظهار ملخص النتائج
                    progress_var.set(100)
                    status_label.config(text="تم استيراد المتدربين بنجاح!")
                    progress_window.update()

                    # إغلاق نافذة التقدم بعد ثانيتين
                    progress_window.after(2000, progress_window.destroy)

                    # عرض ملخص النتائج
                    summary = f"تم إكمال عملية الاستيراد بنجاح:\n\n"
                    if import_new_var.get() == 1:
                        summary += f"• تم إضافة {imported_new} متدرب جديد\n"
                    if import_other_courses_var.get() == 1:
                        summary += f"• تم نقل {imported_from_other} متدرب من دورات أخرى\n"
                    if import_same_course_var.get() == 1:
                        summary += f"• تم تحديث بيانات {updated_same} متدرب موجود\n"
                    if errors > 0:
                        summary += f"\nملاحظة: حدث {errors} أخطاء أثناء الاستيراد"

                    if section_name and section_name != "بدون فصل":
                        summary += f"\n\nتم توزيع المتدربين على فصل: {section_name}"

                    messagebox.showinfo("نتائج الاستيراد", summary)

                    # تحديث عرض المتدربين
                    self.update_students_tree()

                    # إغلاق نافذة المعاينة
                    preview_window.destroy()

                except Exception as e:
                    # في حالة حدوث خطأ
                    try:
                        progress_window.destroy()
                    except:
                        pass
                    messagebox.showerror("خطأ", f"حدث خطأ أثناء الاستيراد: {str(e)}")

            confirm_btn = tk.Button(
                btn_frame,
                text="تنفيذ الاستيراد",
                font=self.fonts["text_bold"],
                bg=self.colors["success"],
                fg="white",
                padx=15, pady=5,
                bd=0, relief=tk.FLAT,
                cursor="hand2",
                command=execute_import
            )
            confirm_btn.pack(side=tk.LEFT, padx=5)

            cancel_btn = tk.Button(
                btn_frame,
                text="إلغاء",
                font=self.fonts["text_bold"],
                bg=self.colors["danger"],
                fg="white",
                padx=15, pady=5,
                bd=0, relief=tk.FLAT,
                cursor="hand2",
                command=preview_window.destroy
            )
            cancel_btn.pack(side=tk.RIGHT, padx=5)

        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء قراءة ملف Excel: {str(e)}")

    # تحديث قائمة الفصول عند فتح النافذة
    update_sections()


def close_window(self):
    # إلغاء ربط الحدث قبل إغلاق النافذة
    try:
        self.name_search_entry.unbind("<KeyRelease>")
    except (tk.TclError, AttributeError):
        pass
    # إغلاق النافذة
    self.window.destroy()


def is_widget_valid(self, widget):
    """التحقق من صلاحية عنصر واجهة المستخدم"""
    try:
        widget.winfo_exists()
        return True
    except (tk.TclError, AttributeError):
        return False


def setup_students_tab(self):
    search_frame = tk.LabelFrame(self.students_tab, text="البحث عن متدرب", font=self.fonts["subtitle"],
                                 bg=self.colors["light"], fg=self.colors["dark"], padx=10, pady=10)
    search_frame.pack(fill=tk.X, padx=10, pady=5)

    search_inner_frame = tk.Frame(search_frame, bg=self.colors["light"])
    search_inner_frame.pack(fill=tk.X, padx=5, pady=5)

    # تعديل: تغيير القائمة المنسدلة لعرض جميع المتدربين والمتدربين المستبعدين
    tk.Label(search_inner_frame, text="عرض:", font=self.fonts["text_bold"],
             bg=self.colors["light"]).pack(side=tk.RIGHT, padx=5)

    self.course_type_var = tk.StringVar(value="جميع المتدربين")
    course_type_combo = ttk.Combobox(
        search_inner_frame,
        textvariable=self.course_type_var,
        values=["جميع المتدربين", "المتدربين النشطين", "المتدربين المستبعدين"],  # تغيير الخيارات
        state="readonly",
        width=20,
        font=self.fonts["text"]
    )
    course_type_combo.pack(side=tk.RIGHT, padx=5)
    course_type_combo.bind("<<ComboboxSelected>>", lambda e: self.update_students_tree())

    tk.Label(search_inner_frame, text="بحث (الاسم أو الهوية):", font=self.fonts["text_bold"],
             bg=self.colors["light"]).pack(side=tk.RIGHT, padx=5)
    self.search_entry = tk.Entry(search_inner_frame, font=self.fonts["text"], width=30, bd=2, relief=tk.GROOVE)
    self.search_entry.pack(side=tk.RIGHT, padx=5)
    self.search_entry.bind("<Return>", lambda e: self.search_student())

    search_button = tk.Button(
        search_inner_frame, text="بحث", font=self.fonts["text_bold"], bg=self.colors["primary"], fg="white",
        padx=10, pady=3, bd=0, relief=tk.FLAT, command=self.search_student, cursor="hand2"
    )
    search_button.pack(side=tk.RIGHT, padx=5)

    show_all_button = tk.Button(
        search_inner_frame, text="عرض الكل", font=self.fonts["text_bold"], bg=self.colors["secondary"], fg="white",
        padx=10, pady=3, bd=0, relief=tk.FLAT, command=self.update_students_tree, cursor="hand2"
    )
    show_all_button.pack(side=tk.LEFT, padx=5)

    button_frame = tk.Frame(search_frame, bg=self.colors["light"])
    button_frame.pack(fill=tk.X, padx=5, pady=5)

    add_to_course_btn = tk.Button(
        button_frame,
        text="إضافة متدربين جدد لدورة موجودة",
        font=self.fonts["text_bold"],
        bg="#3949AB",  # لون مميز
        fg="white",
        padx=10, pady=3,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=self.add_students_to_existing_course
    )
    add_to_course_btn.pack(side=tk.LEFT, padx=5)

    # تعديل: حذف زر إضافة متدرب جديد وإضافة زر تصدير كشوفات الدورات مكانه
    export_attendance_sheets_btn = tk.Button(
        button_frame,
        text="تصدير كشوفات الدورات",
        font=self.fonts["text_bold"],
        bg="#FF9800",  # لون برتقالي مميز
        fg="white",
        padx=10, pady=3,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=self.export_course_attendance_sheets
    )
    export_attendance_sheets_btn.pack(side=tk.RIGHT, padx=5)

    if self.current_user["permissions"]["can_edit_students"]:
        edit_button = tk.Button(
            button_frame, text="تعديل المتدرب المحدد", font=self.fonts["text_bold"], bg=self.colors["late"],
            fg="white",
            padx=10, pady=3, bd=0, relief=tk.FLAT, command=lambda: self.edit_student(from_selection=True),
            cursor="hand2"
        )
        edit_button.pack(side=tk.RIGHT, padx=5)

    if self.current_user["permissions"]["can_delete_students"]:
        delete_button = tk.Button(
            button_frame, text="حذف المتدرب المحدد", font=self.fonts["text_bold"], bg=self.colors["danger"],
            fg="white",
            padx=10, pady=3, bd=0, relief=tk.FLAT, command=self.delete_selected_student, cursor="hand2"
        )
        delete_button.pack(side=tk.RIGHT, padx=5)

        multi_courses_button = tk.Button(
            button_frame, text="إدارة الفصول وتصدير الكشوفات", font=self.fonts["text_bold"], bg="#4285f4",
            # لون أزرق أكثر بروزًا
            fg="white",
            padx=10, pady=3, bd=0, relief=tk.FLAT, cursor="hand2", command=self.manage_multi_section_courses
        )
        multi_courses_button.pack(side=tk.LEFT, padx=5)

    if self.current_user["permissions"]["can_import_data"]:
        import_course_button = tk.Button(
            button_frame, text="استيراد دورة جديدة", font=self.fonts["text_bold"], bg=self.colors["secondary"],
            fg="white",
            padx=10, pady=3, bd=0, relief=tk.FLAT, command=self.import_new_course, cursor="hand2"
        )
        import_course_button.pack(side=tk.LEFT, padx=5)

    view_profile_button = tk.Button(
        button_frame, text="عرض ملف المتدرب", font=self.fonts["text_bold"], bg=self.colors["secondary"], fg="white",
        padx=10, pady=3, bd=0, relief=tk.FLAT, command=self.view_student_profile, cursor="hand2"
    )
    view_profile_button.pack(side=tk.RIGHT, padx=5)

    students_display_frame = tk.LabelFrame(self.students_tab, text="قائمة المتدربين", font=self.fonts["subtitle"],
                                           bg=self.colors["light"], fg=self.colors["dark"], padx=10, pady=10)
    students_display_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)

    self.students_tree_scroll = tk.Scrollbar(students_display_frame)
    self.students_tree_scroll.pack(side=tk.RIGHT, fill=tk.Y)

    # إضافة عمود لإظهار حالة الاستبعاد
    self.students_tree = ttk.Treeview(
        students_display_frame,
        columns=("id", "name", "rank", "course", "phone", "status"),
        show="headings",
        yscrollcommand=self.students_tree_scroll.set,
        style="Bold.Treeview"
    )
    self.students_tree.column("id", width=120, anchor=tk.CENTER)
    self.students_tree.column("name", width=150, anchor=tk.CENTER)
    self.students_tree.column("rank", width=80, anchor=tk.CENTER)
    self.students_tree.column("course", width=150, anchor=tk.CENTER)
    self.students_tree.column("phone", width=120, anchor=tk.CENTER)
    self.students_tree.column("status", width=80, anchor=tk.CENTER)

    self.students_tree.heading("id", text="رقم الهوية")
    self.students_tree.heading("name", text="الاسم")
    self.students_tree.heading("rank", text="الرتبة")
    self.students_tree.heading("course", text="اسم الدورة")
    self.students_tree.heading("phone", text="رقم الجوال")
    self.students_tree.heading("status", text="الحالة")

    self.students_tree.pack(fill=tk.BOTH, expand=True)
    self.students_tree_scroll.config(command=self.students_tree.yview)

    # إضافة نمط للمتدربين المستبعدين
    self.students_tree.tag_configure("excluded", background="#f8bbd0")

    self.students_tree.bind("<Double-1>", self.on_student_double_click)


def export_course_attendance_sheets(self):
    """وظيفة تصدير كشوفات الحضور للدورات (متاحة للجميع)"""
    try:
        # التأكد من وجود مكتبة python-docx
        if 'Document' not in globals():
            messagebox.showerror("خطأ",
                                 "لم يتم العثور على مكتبة python-docx. قم بتثبيتها باستخدام: pip install python-docx")
            return

        # إنشاء نافذة جديدة لاختيار الدورة والفصل
        export_window = tk.Toplevel(self.root)
        export_window.title("تصدير كشوفات الحضور")
        export_window.geometry("600x400")
        export_window.configure(bg=self.colors["light"])
        export_window.transient(self.root)
        export_window.grab_set()

        # توسيط النافذة
        x = (export_window.winfo_screenwidth() - 600) // 2
        y = (export_window.winfo_screenheight() - 400) // 2
        export_window.geometry(f"600x400+{x}+{y}")

        # عنوان النافذة
        tk.Label(
            export_window,
            text="تصدير كشوفات الحضور",
            font=self.fonts["title"],
            bg=self.colors["primary"],
            fg="white",
            padx=10, pady=10
        ).pack(fill=tk.X)

        # إطار الإعدادات
        settings_frame = tk.Frame(export_window, bg=self.colors["light"], padx=20, pady=20)
        settings_frame.pack(fill=tk.X)

        # إطار البحث عن الدورة
        search_frame = tk.Frame(settings_frame, bg=self.colors["light"])
        search_frame.pack(fill=tk.X, pady=10)

        tk.Label(
            search_frame,
            text="البحث عن دورة:",
            font=self.fonts["text_bold"],
            bg=self.colors["light"]
        ).pack(side=tk.RIGHT, padx=5)

        search_var = tk.StringVar()
        search_entry = tk.Entry(
            search_frame,
            textvariable=search_var,
            font=self.fonts["text"],
            width=30
        )
        search_entry.pack(side=tk.RIGHT, padx=5)

        # إطار اختيار الدورة
        course_frame = tk.Frame(settings_frame, bg=self.colors["light"])
        course_frame.pack(fill=tk.X, pady=10)

        tk.Label(
            course_frame,
            text="اختيار الدورة:",
            font=self.fonts["text_bold"],
            bg=self.colors["light"]
        ).pack(side=tk.RIGHT, padx=5)

        # الحصول على قائمة الدورات المتاحة
        cursor = self.conn.cursor()
        cursor.execute("SELECT DISTINCT course FROM trainees WHERE is_excluded=0 ORDER BY course")
        courses = [row[0] for row in cursor.fetchall() if row[0]]

        course_var = tk.StringVar()
        course_combo = ttk.Combobox(
            course_frame,
            textvariable=course_var,
            values=courses,
            state="readonly",
            width=40,
            font=self.fonts["text"]
        )
        course_combo.pack(side=tk.RIGHT, padx=5)

        # إطار اختيار الفصل
        section_frame = tk.Frame(settings_frame, bg=self.colors["light"])
        section_frame.pack(fill=tk.X, pady=10)

        tk.Label(
            section_frame,
            text="اختيار الفصل:",
            font=self.fonts["text_bold"],
            bg=self.colors["light"]
        ).pack(side=tk.RIGHT, padx=5)

        section_var = tk.StringVar()
        section_combo = ttk.Combobox(
            section_frame,
            textvariable=section_var,
            state="readonly",
            width=40,
            font=self.fonts["text"]
        )
        section_combo.pack(side=tk.RIGHT, padx=5)

        # إطار معلومات
        info_frame = tk.Frame(settings_frame, bg=self.colors["light"])
        info_frame.pack(fill=tk.X, pady=10)

        info_var = tk.StringVar(value="اختر دورة لعرض الفصول المتاحة")
        info_label = tk.Label(
            info_frame,
            textvariable=info_var,
            font=self.fonts["text"],
            bg=self.colors["light"],
            fg=self.colors["primary"]
        )
        info_label.pack()

        # دالة تحديث قائمة الفصول
        def update_sections():
            selected_course = course_var.get()
            if not selected_course:
                section_combo['values'] = []
                section_var.set("")
                info_var.set("اختر دورة لعرض الفصول المتاحة")
                return

            # الحصول على الفصول المتاحة للدورة
            cursor = self.conn.cursor()
            cursor.execute("""
                   SELECT section_name
                   FROM course_sections
                   WHERE course_name=?
                   ORDER BY section_name
               """, (selected_course,))
            sections = [row[0] for row in cursor.fetchall()]

            if sections:
                # إضافة خيار تصدير الدورة كاملة
                section_values = ["الدورة كاملة"] + sections
                section_combo['values'] = section_values
                section_var.set("الدورة كاملة")  # اختيار الخيار الافتراضي

                # عرض عدد الفصول
                info_var.set(f"عدد الفصول المتاحة: {len(sections)}")
            else:
                # إذا لم تكن هناك فصول، عرض خيار الدورة كاملة فقط
                section_combo['values'] = ["الدورة كاملة"]
                section_var.set("الدورة كاملة")
                info_var.set("لا توجد فصول - سيتم تصدير الدورة كاملة")

        # دالة البحث عن الدورات
        def search_courses(*args):
            search_text = search_var.get().strip()
            if search_text:
                # تصفية الدورات بناءً على النص المدخل
                filtered_courses = [course for course in courses if search_text.lower() in course.lower()]
                course_combo['values'] = filtered_courses
            else:
                # إعادة عرض جميع الدورات
                course_combo['values'] = courses

        # ربط البحث بالحقل
        search_var.trace_add("write", search_courses)

        # ربط تحديث الفصول بتغيير الدورة
        course_combo.bind("<<ComboboxSelected>>", lambda e: update_sections())

        # إطار الأزرار
        button_frame = tk.Frame(export_window, bg=self.colors["light"], pady=20)
        button_frame.pack(fill=tk.X, padx=20)

        def export_selected():
            """تصدير كشف الحضور للدورة/الفصل المحدد"""
            selected_course = course_var.get()
            selected_section = section_var.get()

            if not selected_course:
                messagebox.showwarning("تنبيه", "الرجاء اختيار دورة")
                return

            if not selected_section:
                messagebox.showwarning("تنبيه", "الرجاء اختيار فصل أو 'الدورة كاملة'")
                return

            try:
                if selected_section == "الدورة كاملة":
                    # تصدير كشف حضور للدورة كاملة
                    self.export_full_course_attendance_sheet(selected_course)
                else:
                    # تصدير كشف حضور لفصل محدد
                    self.export_section_to_word(selected_course, selected_section)

                # إغلاق النافذة بعد التصدير الناجح
                export_window.destroy()

            except Exception as e:
                messagebox.showerror("خطأ", f"حدث خطأ أثناء التصدير: {str(e)}")

        export_btn = tk.Button(
            button_frame,
            text="تصدير كشف الحضور",
            font=self.fonts["text_bold"],
            bg=self.colors["success"],
            fg="white",
            padx=15, pady=5,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=export_selected
        )
        export_btn.pack(side=tk.LEFT, padx=5)

        cancel_btn = tk.Button(
            button_frame,
            text="إلغاء",
            font=self.fonts["text_bold"],
            bg=self.colors["dark"],
            fg="white",
            padx=15, pady=5,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=export_window.destroy
        )
        cancel_btn.pack(side=tk.RIGHT, padx=5)

    except Exception as e:
        messagebox.showerror("خطأ", f"حدث خطأ في تصدير كشوفات الحضور: {str(e)}")


def export_full_course_attendance_sheet(self, course_name):
    """تصدير كشف حضور للدورة كاملة (جميع المتدربين بدون تقسيم فصول)"""
    try:
        # الحصول على بيانات المتدربين في الدورة (فقط غير المستبعدين)
        cursor = self.conn.cursor()
        cursor.execute("""
               SELECT national_id, name, rank
               FROM trainees
               WHERE course=? AND is_excluded=0
               ORDER BY name
           """, (course_name,))
        students_data = cursor.fetchall()

        if not students_data:
            messagebox.showinfo("ملاحظة", f"لا يوجد متدربين نشطين مسجلين في دورة '{course_name}'")
            return

        # إنشاء مستند جديد
        doc = Document()

        # إعداد المستند للغة العربية (RTL) بتنسيق عمودي
        section = doc.sections[0]
        section.page_width = Inches(8.27)  # A4 width in portrait
        section.page_height = Inches(11.69)  # A4 height in portrait
        section.left_margin = Inches(0.5)
        section.right_margin = Inches(0.5)
        section.top_margin = Inches(0.7)
        section.bottom_margin = Inches(0.7)

        # إعداد الرأس (Header) مع خط فاصل
        header = section.header
        header_para = header.paragraphs[0]
        header_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
        header_run = header_para.add_run(f'كشف حضور وغياب متدربين دورة: {course_name}')
        header_run.font.size = Pt(14)
        header_run.font.bold = True
        header_run.font.rtl = True

        # إضافة إجمالي عدد المتدربين في الرأس
        header_para = header.add_paragraph()
        header_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
        student_count_run = header_para.add_run(f'إجمالي عدد المتدربين: {len(students_data)}')
        student_count_run.font.size = Pt(12)
        student_count_run.font.bold = True
        student_count_run.font.rtl = True

        # إضافة خط أفقي بعد معلومات الدورة في الرأس
        header_para.paragraph_format.border_bottom = True

        # إضافة تاريخ الطباعة في الرأس
        today_date = datetime.datetime.now().strftime("%Y-%m-%d")
        header_para = header.add_paragraph()
        header_para.alignment = WD_ALIGN_PARAGRAPH.LEFT
        header_date = header_para.add_run(f'تاريخ الطباعة: {today_date}')
        header_date.font.size = Pt(9)
        header_date.font.rtl = True

        # إعداد التذييل بشكل بسيط
        footer = section.footer
        footer_para = footer.paragraphs[0]
        footer_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
        footer_text = footer_para.add_run('نظام إدارة الحضور والغياب - قسم شؤون المدربين')
        footer_text.font.size = Pt(9)
        footer_text.font.rtl = True

        # إضافة فقرة فاصلة قبل الجدول
        doc.add_paragraph()

        # إنشاء جدول للحضور والغياب
        table = doc.add_table(rows=1, cols=8)
        table.style = 'Table Grid'

        # تعريف رأس الجدول
        hdr_cells = table.rows[0].cells
        headers = ["العدد", "الاسم", "رقم الهوية", "الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس"]

        # إضافة العناوين من اليمين إلى اليسار (عكس الترتيب)
        for i, header in enumerate(reversed(headers)):
            hdr_cells[i].text = header
            # تنسيق العناوين
            hdr_cells[i].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
            for run in hdr_cells[i].paragraphs[0].runs:
                run.font.bold = True
                run.font.size = Pt(11)
                run.font.rtl = True

            # تطبيق تظليل لرأس الجدول
            try:
                shading_elm = parse_xml(r'<w:shd {} w:fill="D9D9D9"/>'.format(nsdecls('w')))
                hdr_cells[i]._element.get_or_add_tcPr().append(shading_elm)
            except:
                pass

        # إضافة بيانات المتدربين
        for i, student in enumerate(students_data):
            national_id, name, rank = student
            row_cells = table.add_row().cells

            # إضافة البيانات من اليمين إلى اليسار (عكس الترتيب)
            # العدد (تسلسلي)
            row_cells[7].text = str(i + 1)
            row_cells[7].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER

            # الاسم - توسيط
            row_cells[6].text = name
            row_cells[6].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER

            # رقم الهوية
            row_cells[5].text = national_id
            row_cells[5].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER

            # الأيام تبقى فارغة للتعبئة يدوياً
            for day_idx in range(5):
                row_cells[day_idx].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER

            # تنسيق النص في الصف
            for cell in row_cells:
                for paragraph in cell.paragraphs:
                    for run in paragraph.runs:
                        run.font.rtl = True
                        run.font.size = Pt(10)

        # ضبط أبعاد الجدول
        table.autofit = False
        col_widths = [0.5, 2.6, 1.4, 0.7, 0.7, 0.7, 0.7, 0.7]

        try:
            for i, width in enumerate(col_widths):
                table.columns[i].width = Inches(width)
        except:
            pass

        # إضافة مساحة بعد الجدول
        doc.add_paragraph()

        # إضافة جدول للتوقيعات
        sig_table = doc.add_table(rows=1, cols=3)
        sig_table.style = 'Table Grid'
        sig_cells = sig_table.rows[0].cells

        sig_cells[2].text = "المسؤول: _________________"
        sig_cells[1].text = "رئيس القسم: ______________"
        sig_cells[0].text = "المدير: __________________"

        for cell in sig_cells:
            cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
            for run in cell.paragraphs[0].runs:
                run.font.rtl = True
                run.font.size = Pt(11)

        # إضافة ملاحظات في نهاية المستند
        doc.add_paragraph()
        notes_para = doc.add_paragraph()
        notes_para.alignment = WD_ALIGN_PARAGRAPH.RIGHT
        notes_para.add_run("ملاحظات:").bold = True

        # إضافة خطوط للملاحظات
        for _ in range(3):
            line_para = doc.add_paragraph("_" * 80)
            line_para.alignment = WD_ALIGN_PARAGRAPH.RIGHT

        # حفظ المستند
        export_file = filedialog.asksaveasfilename(
            defaultextension=".docx",
            filetypes=[("Word documents", "*.docx")],
            initialfile=f"كشف_حضور_دورة_{course_name}.docx"
        )

        if export_file:
            doc.save(export_file)
            messagebox.showinfo("نجاح", f"تم تصدير كشف الحضور لدورة '{course_name}' بنجاح إلى:\n{export_file}")

            # فتح الملف مباشرة بعد التصدير
            try:
                os.startfile(export_file)
            except:
                pass

    except Exception as e:
        messagebox.showerror("خطأ", f"حدث خطأ أثناء تصدير كشف حضور الدورة: {str(e)}")


def setup_archive_tab(self):
    """إعداد تبويب أرشيف الدورات"""
    archive_frame = tk.Frame(self.archive_tab, bg=self.colors["light"], padx=10, pady=10)
    archive_frame.pack(fill=tk.BOTH, expand=True)

    # عنوان التبويب
    tk.Label(
        archive_frame,
        text="أرشيف الدورات التدريبية",
        font=self.fonts["title"],
        bg=self.colors["primary"],
        fg="white",
        padx=10, pady=10
    ).pack(fill=tk.X)
    # إطار أزرار الأرشفة
    button_frame = tk.Frame(archive_frame, bg=self.colors["light"], pady=20)
    button_frame.pack(fill=tk.X)

    # قسم تصدير الدورات إلى الأرشيف
    export_labelframe = tk.LabelFrame(
        archive_frame,
        text="تصدير الدورات إلى الأرشيف",
        font=self.fonts["subtitle"],
        bg=self.colors["light"],
        fg=self.colors["dark"],
        padx=15,
        pady=15
    )
    export_labelframe.pack(fill=tk.X, pady=10)

    tk.Label(
        export_labelframe,
        text="اختر الدورة التي تريد تصديرها إلى أرشيف خارجي:",
        font=self.fonts["text_bold"],
        bg=self.colors["light"]
    ).pack(anchor=tk.W, pady=(0, 10))

    # إطار لعرض الدورات المتاحة
    courses_frame = tk.Frame(export_labelframe, bg=self.colors["light"])
    courses_frame.pack(fill=tk.X, pady=5)

    # الحصول على جميع الدورات الحالية
    cursor = self.conn.cursor()
    cursor.execute("SELECT DISTINCT course FROM trainees")
    all_courses = [row[0] for row in cursor.fetchall() if row[0]]

    # إطار القائمة
    list_frame = tk.Frame(export_labelframe, bg=self.colors["light"])
    list_frame.pack(fill=tk.X, pady=5)

    # شريط تمرير للقائمة
    list_scroll = tk.Scrollbar(list_frame)
    list_scroll.pack(side=tk.RIGHT, fill=tk.Y)

    # قائمة الدورات مع إمكانية اختيار متعدد
    self.archive_courses_listbox = tk.Listbox(
        list_frame,
        font=self.fonts["text"],
        selectbackground=self.colors["primary"],
        selectforeground="white",
        selectmode=tk.MULTIPLE,
        height=6,
        yscrollcommand=list_scroll.set
    )
    self.archive_courses_listbox.pack(fill=tk.X)
    list_scroll.config(command=self.archive_courses_listbox.yview)

    # إضافة الدورات إلى القائمة
    for course in all_courses:
        self.archive_courses_listbox.insert(tk.END, course)

    # أزرار التصدير
    buttons_frame = tk.Frame(export_labelframe, bg=self.colors["light"], pady=10)
    buttons_frame.pack(fill=tk.X)

    # دالة تصدير الدورات المحددة
    def export_selected_courses():
        selected_indices = self.archive_courses_listbox.curselection()
        if not selected_indices:
            messagebox.showinfo("تنبيه", "الرجاء اختيار دورة واحدة على الأقل للتصدير")
            return

        selected_courses = [self.archive_courses_listbox.get(idx) for idx in selected_indices]

        # تأكيد التصدير
        confirm_msg = f"هل أنت متأكد من تصدير الدورات التالية إلى الأرشيف؟\n\n"
        for course in selected_courses:
            confirm_msg += f"- {course}\n"

        if not messagebox.askyesno("تأكيد التصدير", confirm_msg):
            return

        # تصدير الدورات المحددة
        success = self.archive_manager.export_courses_to_archive(selected_courses)

        if success:
            # سؤال المستخدم إذا كان يريد حذف الدورات من النظام
            if messagebox.askyesno(
                    "حذف الدورات",
                    "تم تصدير الدورات بنجاح إلى الأرشيف. هل تريد حذف هذه الدورات من النظام الآن؟"
            ):
                self.delete_courses_after_archive(selected_courses)

            # تحديث قائمة الدورات
            self.update_archive_courses_list()

    # أزرار الأرشفة
    export_selected_btn = tk.Button(
        buttons_frame,
        text="تصدير الدورات المحددة",
        font=self.fonts["text_bold"],
        bg=self.colors["primary"],
        fg="white",
        padx=15, pady=5,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=export_selected_courses
    )
    export_selected_btn.pack(side=tk.LEFT, padx=5)

    refresh_btn = tk.Button(
        buttons_frame,
        text="تحديث القائمة",
        font=self.fonts["text_bold"],
        bg=self.colors["secondary"],
        fg="white",
        padx=15, pady=5,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=self.update_archive_courses_list
    )
    refresh_btn.pack(side=tk.LEFT, padx=5)

    # قسم استعراض الأرشيف
    view_labelframe = tk.LabelFrame(
        archive_frame,
        text="استعراض الأرشيف",
        font=self.fonts["subtitle"],
        bg=self.colors["light"],
        fg=self.colors["dark"],
        padx=15,
        pady=15
    )
    view_labelframe.pack(fill=tk.X, pady=10)

    tk.Label(
        view_labelframe,
        text="استعراض الدورات المؤرشفة سابقًا (قراءة فقط):",
        font=self.fonts["text_bold"],
        bg=self.colors["light"]
    ).pack(anchor=tk.W, pady=(0, 10))

    view_buttons_frame = tk.Frame(view_labelframe, bg=self.colors["light"])
    view_buttons_frame.pack(fill=tk.X, pady=5)

    open_archive_btn = tk.Button(
        view_buttons_frame,
        text="فتح ملف أرشيف دورات",
        font=self.fonts["text_bold"],
        bg="#FF5722",  # لون برتقالي للتمييز
        fg="white",
        padx=15, pady=8,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=self.archive_manager.open_archive_window
    )
    open_archive_btn.pack(side=tk.RIGHT, padx=5)

    # إضافة زر دمج ملفات الأرشيف
    merge_archives_btn = tk.Button(
        view_buttons_frame,
        text="دمج ملفات أرشيف",
        font=self.fonts["text_bold"],
        bg="#9C27B0",  # لون بنفسجي للتمييز
        fg="white",
        padx=15, pady=8,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=self.archive_manager.merge_archives
    )
    merge_archives_btn.pack(side=tk.RIGHT, padx=5)


def update_archive_courses_list(self):
    """تحديث قائمة الدورات المتاحة للأرشفة"""
    self.archive_courses_listbox.delete(0, tk.END)

    cursor = self.conn.cursor()
    cursor.execute("SELECT DISTINCT course FROM trainees")
    all_courses = [row[0] for row in cursor.fetchall() if row[0]]

    for course in all_courses:
        self.archive_courses_listbox.insert(tk.END, course)


def delete_courses_after_archive(self, course_names):
    """حذف الدورات بعد أرشفتها"""
    if not self.current_user["permissions"]["can_delete_students"]:
        messagebox.showwarning("تنبيه", "ليس لديك صلاحية حذف الدورات")
        return

    if not course_names:
        return

    # إنشاء نافذة تقدم العملية
    progress_window = tk.Toplevel(self.root)
    progress_window.title("حذف الدورات")
    progress_window.geometry("450x180")
    progress_window.configure(bg=self.colors["light"])
    progress_window.transient(self.root)
    progress_window.grab_set()

    # توسيط النافذة
    x = (progress_window.winfo_screenwidth() - 450) // 2
    y = (progress_window.winfo_screenheight() - 180) // 2
    progress_window.geometry(f"450x180+{x}+{y}")

    tk.Label(
        progress_window,
        text=f"جاري حذف {len(course_names)} دورة...",
        font=self.fonts["text_bold"],
        bg=self.colors["light"],
        pady=10
    ).pack()

    progress_var = tk.DoubleVar()
    progress_bar = ttk.Progressbar(
        progress_window,
        variable=progress_var,
        maximum=100,
        length=400
    )
    progress_bar.pack(pady=10)

    status_label = tk.Label(
        progress_window,
        text="جاري تحضير العملية...",
        font=self.fonts["text"],
        bg=self.colors["light"]
    )
    status_label.pack(pady=5)

    progress_window.update()

    try:
        cursor = self.conn.cursor()

        # الحذف لكل دورة
        for i, course_name in enumerate(course_names):
            # تحديث شريط التقدم
            progress_var.set((i / len(course_names)) * 80)
            status_label.config(text=f"جاري حذف دورة: {course_name}")
            progress_window.update()

            # الحصول على أرقام هويات المتدربين في الدورة
            cursor.execute("SELECT national_id FROM trainees WHERE course=?", (course_name,))
            student_ids = [row[0] for row in cursor.fetchall()]

            with self.conn:
                # حذف سجلات الحضور للمتدربين
                for student_id in student_ids:
                    self.conn.execute("DELETE FROM attendance WHERE national_id=?", (student_id,))

                # حذف توزيع المتدربين على الفصول
                self.conn.execute("DELETE FROM student_sections WHERE course_name=?", (course_name,))

                # حذف الفصول
                self.conn.execute("DELETE FROM course_sections WHERE course_name=?", (course_name,))

                # حذف المتدربين
                self.conn.execute("DELETE FROM trainees WHERE course=?", (course_name,))

        progress_var.set(100)
        status_label.config(text="تم حذف الدورات بنجاح!")
        progress_window.update()

        # إغلاق نافذة التقدم بعد ثانيتين
        progress_window.after(2000, progress_window.destroy)

        # تحديث البيانات
        self.update_students_tree()
        self.update_statistics()
        self.update_attendance_display()

        messagebox.showinfo("نجاح", f"تم حذف {len(course_names)} دورة بنجاح")

    except Exception as e:
        messagebox.showerror("خطأ", f"حدث خطأ أثناء حذف الدورات: {str(e)}")
        progress_window.destroy()


def on_student_double_click(self, event):
    selected_item = self.students_tree.selection()
    if not selected_item:
        return
    self.view_student_profile()


def search_student(self):
    """البحث عن متدرب مع اعتبار فلتر نوع القائمة الجديدة"""
    text = self.search_entry.get().strip()
    filter_type = self.course_type_var.get()

    # تعديل: شرط البحث حسب الخيار المحدد
    if filter_type == "المتدربين النشطين":
        where_clause = "WHERE (national_id LIKE ? OR name LIKE ?) AND is_excluded=0"
    elif filter_type == "المتدربين المستبعدين":
        where_clause = "WHERE (national_id LIKE ? OR name LIKE ?) AND is_excluded=1"
    else:  # "جميع المتدربين"
        where_clause = "WHERE (national_id LIKE ? OR name LIKE ?)"

    query = f"""
       SELECT t.*, 
           (SELECT section_name FROM student_sections 
            WHERE national_id = t.national_id AND course_name = t.course) as section_name
       FROM trainees t
       {where_clause}
       """

    df = pd.read_sql(query, self.conn, params=[f"%{text}%", f"%{text}%"])
    self.populate_students_tree(df)


def update_students_tree(self):
    """تحديث شجرة المتدربين مع تصفح محدود"""
    # تحديد حجم الصفحة إذا لم يكن محدد مسبقًا
    if not hasattr(self, 'students_page_size'):
        self.students_page_size = 100

    if not hasattr(self, 'students_current_page'):
        self.students_current_page = 1

    filter_type = self.course_type_var.get()

    # مسح البيانات الحالية
    for item in self.students_tree.get_children():
        self.students_tree.delete(item)

    # بناء استعلام متطور مع التصفح المحدود
    where_condition = ""
    if filter_type == "المتدربين النشطين":
        where_condition = "WHERE t.is_excluded=0"
    elif filter_type == "المتدربين المستبعدين":
        where_condition = "WHERE t.is_excluded=1"

    # استعلام العدد الإجمالي
    count_query = f"""
           SELECT COUNT(*) 
           FROM trainees t 
           {where_condition}
       """

    cursor = self.conn.cursor()
    cursor.execute(count_query)
    total_students = cursor.fetchone()[0]

    # حساب عدد الصفحات
    total_pages = max(1, (total_students + self.students_page_size - 1) // self.students_page_size)

    # الاستعلام الرئيسي مع الانضمام إلى جدول الفصول
    query = f"""
           SELECT 
               t.national_id, 
               t.name, 
               t.rank, 
               t.course, 
               t.phone, 
               t.is_excluded,
               (SELECT section_name FROM student_sections 
                WHERE national_id = t.national_id AND course_name = t.course) as section_name
           FROM trainees t
           {where_condition}
           ORDER BY t.name
           LIMIT {self.students_page_size} OFFSET {(self.students_current_page - 1) * self.students_page_size}
       """

    cursor.execute(query)
    students_data = cursor.fetchall()

    # إضافة البيانات إلى الجدول
    for student in students_data:
        national_id, name, rank, course, phone, is_excluded, section_name = student

        # تحديد حالة المتدرب (عادي أو مستبعد)
        status = "مستبعد" if is_excluded == 1 else "موجود"

        # تحضير عرض اسم الدورة مع الفصل إذا كان متوفراً
        course_display = course
        if section_name:
            course_display = f"{course_display} - فصل: {section_name}"

        values = (national_id, name, rank, course_display, phone, status)
        item_id = self.students_tree.insert("", tk.END, values=values)

        # تمييز المتدربين المستبعدين
        if is_excluded == 1:
            self.students_tree.item(item_id, tags=("excluded",))

    # إضافة أزرار التنقل بين صفحات المتدربين
    self.create_students_pagination_controls(total_pages)


def change_students_page(self, delta, total_pages):
    """تغيير صفحة جدول المتدربين الحالية والتحديث"""
    new_page = self.students_current_page + delta

    # التأكد من أن الصفحة الجديدة ضمن النطاق المسموح
    if 1 <= new_page <= total_pages:
        self.students_current_page = new_page
        self.update_students_tree()


def populate_students_tree(self, df):
    """تعبئة شجرة المتدربين مع إضافة معلومات الفصل للمتدربين في الدورات متعددة الفصول"""
    for item in self.students_tree.get_children():
        self.students_tree.delete(item)

    for _, row in df.iterrows():
        # تحديد حالة المتدرب (عادي أو مستبعد)
        status = "مستبعد" if row['is_excluded'] == 1 else "موجود"

        # تحضير عرض اسم الدورة مع الفصل إذا كان متوفراً
        course_display = row['course']
        if pd.notna(row.get('section_name')):
            course_display = f"{course_display} - فصل: {row['section_name']}"

        values = (row['national_id'], row['name'], row['rank'], course_display, row['phone'], status)
        item_id = self.students_tree.insert("", tk.END, values=values)

        # تمييز المتدربين المستبعدين
        if row['is_excluded'] == 1:
            self.students_tree.item(item_id, tags=("excluded",))


def import_new_course(self):
    """
       دالة استيراد دورة جديدة من ملف Excel
       مع إضافة تاريخ بداية ونهاية الدورة وفئة الدورة
       """
    if not self.current_user["permissions"]["can_import_data"]:
        messagebox.showwarning("تنبيه", "ليس لديك صلاحية استيراد البيانات")
        return

    import_window = tk.Toplevel(self.root)
    import_window.title("استيراد دورة جديدة")
    import_window.geometry("500x750")  # زيادة ارتفاع النافذة
    import_window.configure(bg=self.colors["light"])
    import_window.transient(self.root)
    import_window.grab_set()

    x = (import_window.winfo_screenwidth() - 500) // 2
    y = (import_window.winfo_screenheight() - 750) // 2
    import_window.geometry(f"500x750+{x}+{y}")

    tk.Label(
        import_window,
        text="استيراد دورة جديدة",
        font=self.fonts["title"],
        bg=self.colors["primary"],
        fg="white",
        padx=10, pady=10
    ).pack(fill=tk.X)

    input_frame = tk.Frame(import_window, bg=self.colors["light"], padx=20, pady=20)
    input_frame.pack(fill=tk.BOTH, expand=True)

    tk.Label(
        input_frame,
        text="اسم الدورة الجديدة:",
        font=self.fonts["text_bold"],
        bg=self.colors["light"]
    ).pack(anchor=tk.W, pady=(0, 5))

    course_entry = tk.Entry(input_frame, font=self.fonts["text"], width=40)
    course_entry.pack(fill=tk.X, pady=(0, 20))

    # إضافة قائمة منسدلة لفئة الدورة
    category_frame = tk.Frame(input_frame, bg=self.colors["light"])
    category_frame.pack(fill=tk.X, pady=10)

    tk.Label(
        category_frame,
        text="فئة الدورة:",
        font=self.fonts["text_bold"],
        bg=self.colors["light"]
    ).pack(side=tk.RIGHT, padx=5)

    course_categories = ["ضباط", "أفراد", "مشتركة", "مدنيين"]
    category_var = tk.StringVar(value="مشتركة")
    category_combo = ttk.Combobox(
        category_frame,
        textvariable=category_var,
        values=course_categories,
        state="readonly",
        width=20,
        font=self.fonts["text"]
    )
    category_combo.pack(side=tk.RIGHT, padx=5)

    # إضافة إطار لتاريخ نهاية الدورة في النظام
    system_end_date_frame = tk.LabelFrame(
        input_frame,
        text="تاريخ نهاية الدورة في النظام",
        font=self.fonts["text_bold"],
        bg=self.colors["light"],
        padx=10,
        pady=10
    )
    system_end_date_frame.pack(fill=tk.X, pady=10)

    system_end_date_entry = DateEntry(
        system_end_date_frame,
        width=15,
        background=self.colors["primary"],
        foreground='white',
        borderwidth=2,
        date_pattern='yyyy-mm-dd',
        font=self.fonts["text"],
        firstweekday="sunday"
    )
    system_end_date_entry.pack(pady=5)

    # إطار لتاريخ بداية الدورة النصي (للعرض فقط)
    start_date_frame = tk.LabelFrame(input_frame, text="تاريخ بداية الدورة (للعرض)", font=self.fonts["text_bold"],
                                     bg=self.colors["light"], padx=10, pady=10)
    start_date_frame.pack(fill=tk.X, pady=10)

    # حقول تاريخ البداية
    start_date_fields = tk.Frame(start_date_frame, bg=self.colors["light"])
    start_date_fields.pack(fill=tk.X)

    # اليوم
    tk.Label(start_date_fields, text="اليوم:", font=self.fonts["text"], bg=self.colors["light"]).pack(side=tk.RIGHT,
                                                                                                      padx=5)
    start_day_entry = tk.Entry(start_date_fields, font=self.fonts["text"], width=5)
    start_day_entry.pack(side=tk.RIGHT, padx=5)

    # الشهر
    tk.Label(start_date_fields, text="الشهر:", font=self.fonts["text"], bg=self.colors["light"]).pack(side=tk.RIGHT,
                                                                                                      padx=5)
    start_month_entry = tk.Entry(start_date_fields, font=self.fonts["text"], width=5)
    start_month_entry.pack(side=tk.RIGHT, padx=5)

    # السنة
    tk.Label(start_date_fields, text="السنة:", font=self.fonts["text"], bg=self.colors["light"]).pack(side=tk.RIGHT,
                                                                                                      padx=5)
    start_year_entry = tk.Entry(start_date_fields, font=self.fonts["text"], width=8)
    start_year_entry.pack(side=tk.RIGHT, padx=5)

    # إطار لتاريخ نهاية الدورة النصي (للعرض فقط)
    end_date_frame = tk.LabelFrame(input_frame, text="تاريخ نهاية الدورة (للعرض)", font=self.fonts["text_bold"],
                                   bg=self.colors["light"], padx=10, pady=10)
    end_date_frame.pack(fill=tk.X, pady=10)

    # حقول تاريخ النهاية
    end_date_fields = tk.Frame(end_date_frame, bg=self.colors["light"])
    end_date_fields.pack(fill=tk.X)

    # اليوم
    tk.Label(end_date_fields, text="اليوم:", font=self.fonts["text"], bg=self.colors["light"]).pack(side=tk.RIGHT,
                                                                                                    padx=5)
    end_day_entry = tk.Entry(end_date_fields, font=self.fonts["text"], width=5)
    end_day_entry.pack(side=tk.RIGHT, padx=5)

    # الشهر
    tk.Label(end_date_fields, text="الشهر:", font=self.fonts["text"], bg=self.colors["light"]).pack(side=tk.RIGHT,
                                                                                                    padx=5)
    end_month_entry = tk.Entry(end_date_fields, font=self.fonts["text"], width=5)
    end_month_entry.pack(side=tk.RIGHT, padx=5)

    # السنة
    tk.Label(end_date_fields, text="السنة:", font=self.fonts["text"], bg=self.colors["light"]).pack(side=tk.RIGHT,
                                                                                                    padx=5)
    end_year_entry = tk.Entry(end_date_fields, font=self.fonts["text"], width=8)
    end_year_entry.pack(side=tk.RIGHT, padx=5)

    # القيود على حقول التاريخ
    def validate_number(P, max_length):
        if P == "":
            return True
        if not P.isdigit():
            return False
        if len(P) > max_length:
            return False
        return True

    # تسجيل وظائف التحقق
    validate_day = import_window.register(lambda P: validate_number(P, 2))
    validate_month = import_window.register(lambda P: validate_number(P, 2))
    validate_year = import_window.register(lambda P: validate_number(P, 4))

    # تطبيق القيود
    start_day_entry.config(validate="key", validatecommand=(validate_day, "%P"))
    start_month_entry.config(validate="key", validatecommand=(validate_month, "%P"))
    start_year_entry.config(validate="key", validatecommand=(validate_year, "%P"))

    end_day_entry.config(validate="key", validatecommand=(validate_day, "%P"))
    end_month_entry.config(validate="key", validatecommand=(validate_month, "%P"))
    end_year_entry.config(validate="key", validatecommand=(validate_year, "%P"))

    columns_frame = tk.Frame(input_frame, bg=self.colors["light"])
    columns_frame.pack(fill=tk.X, pady=5)

    tk.Label(
        input_frame,
        text="يجب أن يكون ترتيب أسماء الأعمدة كما يلي : (الاسم - الرتبة - رقم الهوية - رقم الجوال)",
        font=self.fonts["text"],
        bg=self.colors["light"],
        fg=self.colors["secondary"]
    ).pack(anchor=tk.W, pady=(0, 10))

    file_frame = tk.Frame(input_frame, bg=self.colors["light"])
    file_frame.pack(fill=tk.X)

    file_path_var = tk.StringVar()
    file_entry = tk.Entry(file_frame, textvariable=file_path_var, font=self.fonts["text"], width=30,
                          state="readonly")
    file_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 10))

    def browse_file():
        file_path = filedialog.askopenfilename(
            title="اختر ملف Excel",
            filetypes=[("Excel files", "*.xlsx"), ("All files", "*.*")]
        )
        if file_path:
            file_path_var.set(file_path)

    browse_btn = tk.Button(
        file_frame,
        text="استعراض...",
        font=self.fonts["text"],
        bg=self.colors["secondary"],
        fg="white",
        padx=10, pady=3,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=browse_file
    )
    browse_btn.pack(side=tk.RIGHT)

    def import_course():
        course_name = course_entry.get().strip()
        file_path = file_path_var.get().strip()
        category = category_var.get()
        system_end_date = system_end_date_entry.get_date().strftime("%Y-%m-%d")

        start_day = start_day_entry.get().strip()
        start_month = start_month_entry.get().strip()
        start_year = start_year_entry.get().strip()
        end_day = end_day_entry.get().strip()
        end_month = end_month_entry.get().strip()
        end_year = end_year_entry.get().strip()

        # التحقق من البيانات
        if not course_name:
            messagebox.showwarning("تنبيه", "الرجاء إدخال اسم الدورة")
            return

        if not file_path:
            messagebox.showwarning("تنبيه", "الرجاء اختيار ملف Excel")
            return

        # التحقق من تواريخ البداية والنهاية (اختياري)
        date_valid = True
        date_message = ""

        if (start_day or start_month or start_year) and not (start_day and start_month and start_year):
            date_valid = False
            date_message = "يجب إدخال تاريخ بداية الدورة كاملاً (اليوم والشهر والسنة)"

        if (end_day or end_month or end_year) and not (end_day and end_month and end_year):
            date_valid = False
            date_message = "يجب إدخال تاريخ نهاية الدورة كاملاً (اليوم والشهر والسنة)"

        if not date_valid:
            messagebox.showwarning("تنبيه", date_message)
            return

        # فحص المتدربين المتكررين واستكمال عملية الاستيراد
        self.check_duplicate_students_with_dates(file_path, course_name,
                                                 start_day, start_month, start_year,
                                                 end_day, end_month, end_year,
                                                 system_end_date, category)
        import_window.destroy()

    button_frame = tk.Frame(import_window, bg=self.colors["light"], pady=10)
    button_frame.pack(fill=tk.X, padx=20)

    import_btn = tk.Button(
        button_frame,
        text="استيراد",
        font=self.fonts["text_bold"],
        bg=self.colors["success"],
        fg="white",
        padx=15, pady=5,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=import_course
    )
    import_btn.pack(side=tk.LEFT, padx=5)

    cancel_btn = tk.Button(
        button_frame,
        text="إلغاء",
        font=self.fonts["text_bold"],
        bg=self.colors["danger"],
        fg="white",
        padx=15, pady=5,
        bd=0, relief=tk.FLAT,
        cursor="hand2",
        command=import_window.destroy
    )
    cancel_btn.pack(side=tk.RIGHT, padx=5)
