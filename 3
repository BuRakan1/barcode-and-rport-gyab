    def save_course_dates_and_category(self, course_name, start_day, start_month, start_year,
                                       end_day, end_month, end_year, system_end_date, category):
        """
        حفظ تواريخ بداية ونهاية الدورة وفئتها في قاعدة البيانات
        """
        try:
            current_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            with self.conn:
                # التحقق من وجود الدورة
                cursor = self.conn.cursor()
                cursor.execute("SELECT COUNT(*) FROM course_info WHERE course_name=?", (course_name,))
                exists = cursor.fetchone()[0] > 0

                if exists:
                    # تحديث بيانات الدورة الموجودة
                    self.conn.execute("""
                        UPDATE course_info 
                        SET start_day=?, start_month=?, start_year=?, 
                            end_day=?, end_month=?, end_year=?,
                            end_date_system=?, course_category=?
                        WHERE course_name=?
                    """, (start_day, start_month, start_year, end_day, end_month, end_year,
                          system_end_date, category, course_name))
                else:
                    # إضافة دورة جديدة
                    self.conn.execute("""
                        INSERT INTO course_info 
                        (course_name, start_day, start_month, start_year, end_day, end_month, end_year, 
                         end_date_system, course_category, created_date)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    """, (course_name, start_day, start_month, start_year, end_day, end_month, end_year,
                          system_end_date, category, current_date))

            return True
        except Exception as e:
            print(f"خطأ في حفظ بيانات الدورة: {str(e)}")
            return False

    def check_duplicate_students_with_dates(self, file_path, course_name,
                                            start_day, start_month, start_year,
                                            end_day, end_month, end_year,
                                            system_end_date, category):
        """
        فحص المتدربين المتكررين قبل استيراد دورة جديدة مع دعم تواريخ البداية والنهاية وفئة الدورة
        """
        try:
            # إنشاء نافذة حالة لإظهار تقدم العملية
            progress_window = tk.Toplevel(self.root)
            progress_window.title("فحص المتدربين المتكررين")
            progress_window.geometry("400x150")
            progress_window.configure(bg=self.colors["light"])
            progress_window.transient(self.root)
            progress_window.grab_set()

            # توسيط النافذة
            x = (progress_window.winfo_screenwidth() - 400) // 2
            y = (progress_window.winfo_screenheight() - 150) // 2
            progress_window.geometry(f"400x150+{x}+{y}")

            tk.Label(
                progress_window,
                text="جاري فحص المتدربين المتكررين...",
                font=self.fonts["text_bold"],
                bg=self.colors["light"],
                pady=10
            ).pack()

            progress_var = tk.DoubleVar()
            progress_bar = ttk.Progressbar(
                progress_window,
                variable=progress_var,
                maximum=100,
                length=350
            )
            progress_bar.pack(pady=10)

            status_label = tk.Label(
                progress_window,
                text="جاري قراءة ملف Excel...",
                font=self.fonts["text"],
                bg=self.colors["light"]
            )
            status_label.pack(pady=5)

            progress_window.update()

            # قراءة ملف Excel
            df = pd.read_excel(file_path)

            # تحديد الأعمدة المطلوبة (دعم الأسماء العربية والإنجليزية)
            column_mapping = {
                'الاسم': 'name',
                'رقم الهوية': 'national_id',
                'الرتبة': 'rank',
                'رقم الجوال': 'phone',
                'name': 'name',
                'national_id': 'national_id',
                'rank': 'rank',
                'phone': 'phone'
            }

            # تغيير أسماء الأعمدة إلى النموذج الإنجليزي
            df_columns = list(df.columns)
            english_columns = {}

            for col in df_columns:
                if col in column_mapping:
                    english_columns[col] = column_mapping[col]

            # التحقق من وجود الأعمدة المطلوبة
            required_cols_ar = ["الاسم", "رقم الهوية", "الرتبة", "رقم الجوال"]
            required_cols_en = ["name", "national_id", "rank", "phone"]

            # التحقق من وجود العمود بأي من اللغتين
            has_name = any(col in ["الاسم", "name"] for col in df_columns)
            has_id = any(col in ["رقم الهوية", "national_id"] for col in df_columns)
            has_rank = any(col in ["الرتبة", "rank"] for col in df_columns)
            has_phone = any(col in ["رقم الجوال", "phone"] for col in df_columns)

            if not (has_name and has_id):
                progress_window.destroy()
                messagebox.showwarning("تحذير",
                                       "يجب أن يحتوي الملف على الأعمدة التالية على الأقل:\n"
                                       "- الاسم (name)\n"
                                       "- رقم الهوية (national_id)")
                return False

            # إعادة تسمية الأعمدة للاستخدام الداخلي
            rename_dict = {}
            for orig_col in df.columns:
                if orig_col in column_mapping:
                    rename_dict[orig_col] = column_mapping[orig_col]

            if rename_dict:
                df = df.rename(columns=rename_dict)

            # إضافة الأعمدة المفقودة (اختياري) إذا لم تكن موجودة
            if 'rank' not in df.columns:
                df['rank'] = ''
            if 'phone' not in df.columns:
                df['phone'] = ''

            # قائمة المتدربين المتكررين
            duplicates = []

            # فحص كل متدرب
            progress_var.set(20)
            status_label.config(text="جاري فحص المتدربين المتكررين...")
            progress_window.update()

            total_rows = len(df)
            cursor = self.conn.cursor()

            for i, row in enumerate(df.iterrows()):
                # تحديث شريط التقدم
                progress = 20 + (i / total_rows * 60)
                progress_var.set(progress)

                _, row_data = row
                # تحويل رقم الهوية إلى نص
                nid = str(row_data["national_id"]).strip()
                name = str(row_data["name"]).strip()

                if i % 10 == 0:
                    status_label.config(text=f"فحص المتدرب {i + 1} من {total_rows}: {name}")
                    progress_window.update()

                # التحقق من وجود المتدرب
                cursor.execute("""
                    SELECT t.course, t.name
                    FROM trainees t
                    WHERE t.national_id=?
                """, (nid,))

                result = cursor.fetchone()
                if result:
                    current_course, current_name = result
                    duplicates.append({
                        "id": nid,
                        "name": name,
                        "current_course": current_course
                    })

            progress_window.destroy()

            # حفظ تواريخ الدورة وفئتها بغض النظر عن وجود متدربين متكررين
            self.save_course_dates_and_category(course_name, start_day, start_month, start_year,
                                                end_day, end_month, end_year, system_end_date, category)

            # عرض النتائج
            if duplicates:
                # عرض رسالة بأسماء المتدربين المتكررين فقط
                duplicate_details = f"تم العثور على {len(duplicates)} متدرب موجودين بالفعل في دورات أخرى:\n\n"

                # عرض أول 10 متدربين فقط لتجنب رسائل طويلة جداً
                display_count = min(10, len(duplicates))
                for i in range(display_count):
                    duplicate_details += f"{i + 1}. {duplicates[i]['name']} (هوية: {duplicates[i]['id']}) - دورة: {duplicates[i]['current_course']}\n"

                if len(duplicates) > 10:
                    duplicate_details += f"\n... وغيرهم ({len(duplicates) - 10} آخرين)"

                duplicate_details += "\n\nهل تريد نقل هؤلاء المتدربين من دوراتهم السابقة إلى الدورة الجديدة؟"

                choice = messagebox.askquestion("متدربين متكررين", duplicate_details, type=messagebox.YESNOCANCEL)

                if choice == "cancel":
                    return False

                # متابعة الاستيراد مع خيار النقل (True) أو التخطي (False)
                update_mode = (choice == "yes")

                # إضافة سؤال عما إذا كانت الدورة متعددة الفصول
                is_multi_section = messagebox.askyesno("نوع الدورة", f"هل الدورة '{course_name}' متعددة الفصول؟")

                sections_count = 1
                if is_multi_section:
                    # طلب عدد الفصول
                    sections_count_str = simpledialog.askstring("عدد الفصول", "كم عدد الفصول في هذه الدورة؟",
                                                                initialvalue="2")
                    if not sections_count_str:
                        return False

                    try:
                        sections_count = int(sections_count_str)
                        if sections_count <= 0:
                            messagebox.showwarning("تنبيه", "يجب أن يكون عدد الفصول أكبر من صفر")
                            return False
                    except:
                        messagebox.showwarning("تنبيه", "الرجاء إدخال رقم صحيح لعدد الفصول")
                        return False
                else:
                    # إذا كانت الدورة غير متعددة الفصول، نجعلها بفصل واحد فقط
                    sections_count = 1
                    messagebox.showinfo("معلومات",
                                        f"سيتم إنشاء فصل واحد للدورة '{course_name}' ويمكنك إدارة الفصول لاحقًا من 'إدارة الفصول وتصدير الكشوفات'")

                # استدعاء دالة معالجة الاستيراد
                self.process_course_import_arabic(file_path, course_name, is_multi_section, sections_count, update_mode)
                return True
            else:
                messagebox.showinfo("تقرير الفحص",
                                    f"لم يتم العثور على متدربين متكررين. يمكنك المتابعة في استيراد الدورة '{course_name}'.")
                # إضافة سؤال عما إذا كانت الدورة متعددة الفصول
                is_multi_section = messagebox.askyesno("نوع الدورة", f"هل الدورة '{course_name}' متعددة الفصول؟")

                sections_count = 1
                if is_multi_section:
                    # طلب عدد الفصول
                    sections_count_str = simpledialog.askstring("عدد الفصول", "كم عدد الفصول في هذه الدورة؟",
                                                                initialvalue="2")
                    if not sections_count_str:
                        return False

                    try:
                        sections_count = int(sections_count_str)
                        if sections_count <= 0:
                            messagebox.showwarning("تنبيه", "يجب أن يكون عدد الفصول أكبر من صفر")
                            return False
                    except:
                        messagebox.showwarning("تنبيه", "الرجاء إدخال رقم صحيح لعدد الفصول")
                        return False
                else:
                    # إذا كانت الدورة غير متعددة الفصول، نجعلها بفصل واحد فقط
                    sections_count = 1
                    messagebox.showinfo("معلومات",
                                        f"سيتم إنشاء فصل واحد للدورة '{course_name}' ويمكنك إدارة الفصول لاحقًا من 'إدارة الفصول وتصدير الكشوفات'")

                # استدعاء دالة معالجة الاستيراد
                self.process_course_import_arabic(file_path, course_name, is_multi_section, sections_count, False)
                return False

        except Exception as e:
            try:
                progress_window.destroy()
            except:
                pass
            messagebox.showerror("خطأ", f"حدث خطأ أثناء فحص المتدربين المتكررين: {str(e)}")
            return False

    def save_course_dates(self, course_name, start_day, start_month, start_year, end_day, end_month, end_year):
        """
        حفظ تواريخ بداية ونهاية الدورة في قاعدة البيانات
        """
        try:
            current_date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            with self.conn:
                # التحقق من وجود الدورة
                cursor = self.conn.cursor()
                cursor.execute("SELECT COUNT(*) FROM course_info WHERE course_name=?", (course_name,))
                exists = cursor.fetchone()[0] > 0

                if exists:
                    # تحديث بيانات الدورة الموجودة
                    self.conn.execute("""
                        UPDATE course_info 
                        SET start_day=?, start_month=?, start_year=?, 
                            end_day=?, end_month=?, end_year=?
                        WHERE course_name=?
                    """, (start_day, start_month, start_year, end_day, end_month, end_year, course_name))
                else:
                    # إضافة دورة جديدة
                    self.conn.execute("""
                        INSERT INTO course_info 
                        (course_name, start_day, start_month, start_year, end_day, end_month, end_year, created_date)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                    """, (course_name, start_day, start_month, start_year, end_day, end_month, end_year, current_date))

            return True
        except Exception as e:
            print(f"خطأ في حفظ تواريخ الدورة: {str(e)}")
            return False


    def toggle_student_exclusion(self, national_id, exclude, profile_window=None):
        """إضافة أو إزالة استبعاد المتدرب"""
        if not self.current_user["permissions"]["can_edit_students"]:
            messagebox.showwarning("تنبيه", "ليس لديك صلاحية استبعاد المتدربين")
            return

        cursor = self.conn.cursor()
        cursor.execute("SELECT name, is_excluded FROM trainees WHERE national_id=?", (national_id,))
        student = cursor.fetchone()

        if not student:
            messagebox.showwarning("تنبيه", "لم يتم العثور على المتدرب")
            return

        student_name, current_excluded = student

        if exclude and current_excluded == 1:
            messagebox.showinfo("تنبيه", "هذا المتدرب مستبعد بالفعل")
            return

        if not exclude and current_excluded == 0:
            messagebox.showinfo("تنبيه", "هذا المتدرب غير مستبعد بالفعل")
            return

        if exclude:
            # إنشاء نافذة اختيار سبب الاستبعاد
            reason_window = tk.Toplevel(self.root)
            reason_window.title("سبب الاستبعاد")
            reason_window.geometry("400x300")
            reason_window.configure(bg=self.colors["light"])
            reason_window.transient(self.root)
            reason_window.grab_set()

            # توسيط النافذة
            x = (reason_window.winfo_screenwidth() - 400) // 2
            y = (reason_window.winfo_screenheight() - 300) // 2
            reason_window.geometry(f"400x300+{x}+{y}")

            # عنوان النافذة
            tk.Label(
                reason_window,
                text=f"اختر سبب استبعاد {student_name}",
                font=self.fonts["title"],
                bg=self.colors["primary"],
                fg="white",
                padx=10, pady=10
            ).pack(fill=tk.X)

            # إطار الخيارات
            options_frame = tk.Frame(reason_window, bg=self.colors["light"], padx=20, pady=20)
            options_frame.pack(fill=tk.BOTH, expand=True)

            # متغير لتخزين الخيار المحدد
            selected_reason = tk.StringVar(value="عدم مباشرة الدورة")

            # الخيارات الثلاثة
            reasons = [
                ("عدم مباشرة الدورة", "عدم مباشرة الدورة"),
                ("إلغاء دورة", "إلغاء دورة"),
                ("أخرى", "other")
            ]

            for text, value in reasons:
                tk.Radiobutton(
                    options_frame,
                    text=text,
                    variable=selected_reason,
                    value=value,
                    font=self.fonts["text_bold"],
                    bg=self.colors["light"],
                    activebackground=self.colors["light"]
                ).pack(anchor=tk.W, pady=5)

            # إطار لإدخال السبب المخصص
            custom_reason_frame = tk.Frame(options_frame, bg=self.colors["light"])
            custom_reason_label = tk.Label(
                custom_reason_frame,
                text="أدخل السبب:",
                font=self.fonts["text"],
                bg=self.colors["light"]
            )
            custom_reason_entry = tk.Entry(
                custom_reason_frame,
                font=self.fonts["text"],
                width=30
            )

            def toggle_custom_reason(*args):
                """إظهار/إخفاء حقل السبب المخصص"""
                if selected_reason.get() == "other":
                    custom_reason_frame.pack(fill=tk.X, pady=10)
                    custom_reason_label.pack(anchor=tk.W)
                    custom_reason_entry.pack(fill=tk.X, pady=5)
                    custom_reason_entry.focus_set()
                else:
                    custom_reason_frame.pack_forget()

            # ربط تغيير الخيار بدالة إظهار/إخفاء السبب المخصص
            selected_reason.trace("w", toggle_custom_reason)

            # أزرار الإجراءات
            buttons_frame = tk.Frame(reason_window, bg=self.colors["light"], pady=10)
            buttons_frame.pack(fill=tk.X, padx=20)

            def confirm_exclusion():
                """تأكيد الاستبعاد"""
                # الحصول على السبب النهائي
                if selected_reason.get() == "other":
                    exclusion_reason = custom_reason_entry.get().strip()
                    if not exclusion_reason:
                        messagebox.showwarning("تنبيه", "الرجاء إدخال سبب الاستبعاد")
                        return
                else:
                    exclusion_reason = selected_reason.get()

                # إغلاق نافذة السبب
                reason_window.destroy()

                current_date = datetime.datetime.now().strftime("%Y-%m-%d")

                try:
                    with self.conn:
                        self.conn.execute("""
                            UPDATE trainees 
                            SET is_excluded=1, exclusion_reason=?, excluded_date=? 
                            WHERE national_id=?
                        """, (exclusion_reason, current_date, national_id))

                    messagebox.showinfo("نجاح", f"تم استبعاد المتدرب {student_name} بنجاح")

                    # تحديث الإحصائيات والبيانات
                    self.update_students_tree()
                    self.update_statistics()
                    self.update_attendance_display()

                    # إغلاق نافذة ملف المتدرب إذا كانت مفتوحة وإعادة فتحها لتعكس التغييرات
                    if profile_window:
                        profile_window.destroy()
                        self.view_student_profile()

                except Exception as e:
                    messagebox.showerror("خطأ", f"حدث خطأ أثناء استبعاد المتدرب: {str(e)}")

            confirm_btn = tk.Button(
                buttons_frame,
                text="تأكيد",
                font=self.fonts["text_bold"],
                bg=self.colors["success"],
                fg="white",
                padx=15, pady=5,
                bd=0, relief=tk.FLAT,
                cursor="hand2",
                command=confirm_exclusion
            )
            confirm_btn.pack(side=tk.LEFT, padx=5)

            cancel_btn = tk.Button(
                buttons_frame,
                text="إلغاء",
                font=self.fonts["text_bold"],
                bg=self.colors["danger"],
                fg="white",
                padx=15, pady=5,
                bd=0, relief=tk.FLAT,
                cursor="hand2",
                command=reason_window.destroy
            )
            cancel_btn.pack(side=tk.RIGHT, padx=5)

        else:
            # إلغاء الاستبعاد
            try:
                with self.conn:
                    self.conn.execute("""
                        UPDATE trainees 
                        SET is_excluded=0, exclusion_reason='', excluded_date='' 
                        WHERE national_id=?
                    """, (national_id,))

                messagebox.showinfo("نجاح", f"تم إلغاء استبعاد المتدرب {student_name} بنجاح")
            except Exception as e:
                messagebox.showerror("خطأ", f"حدث خطأ أثناء إلغاء استبعاد المتدرب: {str(e)}")
                return

            # تحديث الإحصائيات والبيانات
            self.update_students_tree()
            self.update_statistics()
            self.update_attendance_display()

            # إغلاق نافذة ملف المتدرب إذا كانت مفتوحة وإعادة فتحها لتعكس التغييرات
            if profile_window:
                profile_window.destroy()
                self.view_student_profile()

    def export_student_to_word(self, student_info, attendance_records):
        """تصدير بيانات المتدرب إلى ملف Word مع إضافة جميع أنواع الحضور والغياب

        Args:
            student_info: معلومات المتدرب (national_id, name, rank, course, ...)
            attendance_records: سجلات الحضور والغياب للمتدرب
        """
        try:
            # التأكد من وجود مكتبة python-docx
            if 'Document' not in globals():
                messagebox.showerror("خطأ",
                                     "لم يتم العثور على مكتبة python-docx. قم بتثبيتها باستخدام: pip install python-docx")
                return

            # استخراج المعلومات من البيانات
            nid = student_info[0]
            name = student_info[1]
            rank = student_info[2]
            course = student_info[3]
            phone = student_info[4]
            is_excluded = student_info[5]
            exclusion_reason = student_info[6] if is_excluded == 1 else ""
            excluded_date = student_info[7] if is_excluded == 1 else ""

            # إنشاء مستند جديد
            doc = Document()

            # إعداد المستند للغة العربية (RTL)
            section = doc.sections[0]
            section.page_width = Inches(8.5)  # A4 width in landscape
            section.page_height = Inches(11)  # A4 height in landscape
            section.left_margin = Inches(0.8)
            section.right_margin = Inches(0.8)
            section.top_margin = Inches(0.8)
            section.bottom_margin = Inches(0.8)

            # إضافة عنوان المستند
            title = doc.add_heading('تقرير بيانات المتدرب', level=0)
            title.alignment = WD_ALIGN_PARAGRAPH.CENTER
            for run in title.runs:
                run.font.size = Pt(18)
                run.font.bold = True
                run.font.rtl = True

            # إضافة معلومات الدورة
            course_info = doc.add_paragraph()
            course_info.alignment = WD_ALIGN_PARAGRAPH.CENTER
            course_info.add_run(f"الدورة: {course}").bold = True
            for run in course_info.runs:
                run.font.rtl = True
                run.font.size = Pt(14)

            # إضافة خط أفقي
            border_paragraph = doc.add_paragraph()
            border_paragraph.paragraph_format.border_bottom = True

            # إضافة معلومات المتدرب
            student_section = doc.add_paragraph()
            student_section.alignment = WD_ALIGN_PARAGRAPH.RIGHT
            student_section_run = student_section.add_run('معلومات المتدرب الأساسية')
            student_section_run.bold = True
            student_section_run.font.size = Pt(14)
            student_section_run.font.rtl = True

            # إنشاء جدول لمعلومات المتدرب
            table = doc.add_table(rows=1, cols=2)
            table.style = 'Table Grid'

            # إضافة البيانات إلى الجدول
            row = table.rows[0].cells
            row[0].text = name
            row[1].text = 'الاسم'

            row = table.add_row().cells
            row[0].text = nid
            row[1].text = 'رقم الهوية'

            row = table.add_row().cells
            row[0].text = rank
            row[1].text = 'الرتبة'

            row = table.add_row().cells
            row[0].text = course
            row[1].text = 'الدورة'

            row = table.add_row().cells
            row[0].text = phone
            row[1].text = 'رقم الجوال'

            row = table.add_row().cells
            row[0].text = "مستبعد" if is_excluded == 1 else "نشط"
            row[1].text = 'حالة المتدرب'

            if is_excluded == 1:
                row = table.add_row().cells
                row[0].text = exclusion_reason
                row[1].text = 'سبب الاستبعاد'

                row = table.add_row().cells
                row[0].text = excluded_date
                row[1].text = 'تاريخ الاستبعاد'

            # تنسيق الجدول
            for row in table.rows:
                for cell in row.cells:
                    # تنسيق النص
                    cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.RIGHT
                    for paragraph in cell.paragraphs:
                        for run in paragraph.runs:
                            run.font.rtl = True
                            run.font.size = Pt(12)

            # تطبيق لون خلفية على الخلايا في العمود الثاني
            for i, row in enumerate(table.rows):
                # تنسيق العنوان
                if len(row.cells[1].paragraphs) > 0 and len(row.cells[1].paragraphs[0].runs) > 0:
                    row.cells[1].paragraphs[0].runs[0].font.bold = True
                # تطبيق تظليل على الخلايا الزوجية للتمييز
                if i % 2 == 0:
                    for cell in row.cells:
                        try:
                            shading_elm = parse_xml(r'<w:shd {} w:fill="F5F5F5"/>'.format(nsdecls('w')))
                            cell._element.get_or_add_tcPr().append(shading_elm)
                        except:
                            # في حالة حدوث خطأ، نتجاهل التظليل
                            pass

            # إضافة فاصل
            doc.add_paragraph()

            # تصنيف سجلات الحضور والغياب
            absence_records = []  # غائب
            late_records = []  # متأخر
            excused_records = []  # غائب بعذر
            not_started_records = []  # لم يباشر
            death_case_records = []  # حالة وفاة
            hospital_records = []  # منوم
            present_records = []  # حاضر
            field_application_records = []  # تطبيق ميداني
            student_day_records = []  # يوم طالب
            evening_remote_records = []  # مسائية / عن بعد

            attendance_records = sorted(attendance_records, key=lambda x: x[6])  # ترتيب حسب التاريخ

            # البحث عن أول تاريخ حضور بعد حالة "لم يباشر"
            first_attendance_after_not_started = None

            # إذا كان هناك سجل "لم يباشر"، نبحث عن أول حضور بعده
            not_started_dates = []
            attendance_dates = []

            for record in attendance_records:
                status = record[7]  # Status column
                date = record[6]  # Date column

                if status == "لم يباشر":
                    not_started_dates.append(date)
                elif status == "حاضر" and not_started_dates:
                    attendance_dates.append(date)

            # تحديد أول تاريخ حضور بعد آخر تاريخ "لم يباشر"
            if not_started_dates and attendance_dates:
                last_not_started = max(not_started_dates)
                attendance_after_not_started = [d for d in attendance_dates if d > last_not_started]
                if attendance_after_not_started:
                    first_attendance_after_not_started = min(attendance_after_not_started)

            # تصنيف السجلات حسب الحالة
            for record in attendance_records:
                status = record[7]  # Status column
                if status == "غائب":
                    absence_records.append(record)
                elif status == "متأخر":
                    late_records.append(record)
                elif status == "غائب بعذر":
                    excused_records.append(record)
                elif status == "لم يباشر":
                    not_started_records.append(record)
                elif status == "حالة وفاة":
                    death_case_records.append(record)
                elif status == "منوم":
                    hospital_records.append(record)
                elif status == "حاضر":
                    present_records.append(record)
                elif status == "تطبيق ميداني":
                    field_application_records.append(record)
                elif status == "يوم طالب":
                    student_day_records.append(record)
                elif status == "مسائية / عن بعد":
                    evening_remote_records.append(record)

            # إضافة ملخص إحصائي (مع مراعاة عدم عرض القيم الصفرية)
            summary_title = doc.add_paragraph()
            summary_title.alignment = WD_ALIGN_PARAGRAPH.RIGHT
            summary_run = summary_title.add_run('ملخص إحصائي')
            summary_run.bold = True
            summary_run.font.size = Pt(14)
            summary_run.font.rtl = True

            # إضافة الإحصائيات التي لها قيم فقط
            stats_to_include = []
            if len(absence_records) > 0:
                stats_to_include.append(("إجمالي أيام الغياب", len(absence_records), "#D32F2F"))
            if len(late_records) > 0:
                stats_to_include.append(("إجمالي أيام التأخير", len(late_records), "#FF9800"))
            if len(excused_records) > 0:
                stats_to_include.append(("إجمالي أيام الغياب بعذر", len(excused_records), "#2196F3"))
            if len(not_started_records) > 0:
                stats_to_include.append(("إجمالي أيام لم يباشر", len(not_started_records), "#FFA500"))
            if len(death_case_records) > 0:
                stats_to_include.append(("إجمالي حالات الوفاة", len(death_case_records), "#7E57C2"))
            if len(hospital_records) > 0:
                stats_to_include.append(("إجمالي حالات المنوم", len(hospital_records), "#26A69A"))
            if len(present_records) > 0:
                stats_to_include.append(("إجمالي أيام الحضور", len(present_records), "#4CAF50"))
            if len(field_application_records) > 0:
                stats_to_include.append(("إجمالي أيام التطبيق الميداني", len(field_application_records), "#909090"))
            if len(student_day_records) > 0:
                stats_to_include.append(("إجمالي أيام طالب", len(student_day_records), "#A9A9A9"))
            if len(evening_remote_records) > 0:
                stats_to_include.append(("إجمالي أيام مسائية/عن بعد", len(evening_remote_records), "#A0A0A0"))

            # إنشاء جدول الملخص فقط إذا كان هناك إحصائيات للعرض
            if stats_to_include:
                summary_table = doc.add_table(rows=len(stats_to_include), cols=2)
                summary_table.style = 'Table Grid'

                # إضافة البيانات الإحصائية
                for i, (title, count, color) in enumerate(stats_to_include):
                    row = summary_table.rows[i].cells
                    row[0].text = str(count)
                    row[1].text = title

                    # تنسيق الخلايا
                    for cell in row:
                        cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.RIGHT
                        for paragraph in cell.paragraphs:
                            for run in paragraph.runs:
                                run.font.rtl = True
                                run.font.size = Pt(12)

                    # تنسيق العناوين في جدول الملخص
                    if len(row[1].paragraphs) > 0 and len(row[1].paragraphs[0].runs) > 0:
                        row[1].paragraphs[0].runs[0].font.bold = True

                    # تحسين عرض جدول الملخص
                    summary_table.autofit = False
                    try:
                        summary_table.columns[0].width = Inches(1.5)
                        summary_table.columns[1].width = Inches(2)
                    except:
                        pass
            else:
                # إذا لم تكن هناك إحصائيات للعرض، أضف فقرة تشير إلى ذلك
                no_stats_para = doc.add_paragraph()
                no_stats_para.alignment = WD_ALIGN_PARAGRAPH.RIGHT
                no_stats_run = no_stats_para.add_run("لا توجد إحصائيات للعرض")
                no_stats_run.font.rtl = True
                no_stats_run.font.italic = True

            # إضافة فاصل
            doc.add_paragraph()

            # إضافة معلومات إضافية إذا كان هناك حالة "لم يباشر" وحضور بعدها
            if not_started_records and first_attendance_after_not_started:
                not_started_info = doc.add_paragraph()
                not_started_info.alignment = WD_ALIGN_PARAGRAPH.RIGHT
                not_started_run = not_started_info.add_run(
                    f'تاريخ أول حضور بعد حالة "لم يباشر": {first_attendance_after_not_started}')
                not_started_run.bold = True
                not_started_run.font.rtl = True
                not_started_run.font.size = Pt(12)
                not_started_run.font.color.rgb = RGBColor(0, 128, 0)  # لون أخضر للتمييز

                doc.add_paragraph()

            # دالة مساعدة لإنشاء جدول لعرض الحالات
            def create_status_table(title, records, has_reason=False):
                if not records:
                    return False  # لم يتم إنشاء الجدول

                status_title = doc.add_paragraph()
                status_title.alignment = WD_ALIGN_PARAGRAPH.RIGHT
                status_run = status_title.add_run(title)
                status_run.bold = True
                status_run.font.size = Pt(14)
                status_run.font.rtl = True

                # تحديد عدد الأعمدة بناءً على وجود سبب
                cols = 3 if has_reason else 2

                status_table = doc.add_table(rows=1, cols=cols)
                status_table.style = 'Table Grid'

                header_cells = status_table.rows[0].cells
                header_cells[0].text = 'التاريخ'
                header_cells[1].text = 'الحالة'
                if has_reason:
                    header_cells[2].text = 'السبب'

                # تنسيق الرأس
                for cell in header_cells:
                    cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
                    if len(cell.paragraphs[0].runs) > 0:
                        cell.paragraphs[0].runs[0].font.bold = True
                        cell.paragraphs[0].runs[0].font.rtl = True
                    # إضافة تظليل للرأس
                    try:
                        shading_elm = parse_xml(r'<w:shd {} w:fill="DDDDDD"/>'.format(nsdecls('w')))
                        cell._element.get_or_add_tcPr().append(shading_elm)
                    except:
                        pass

                for record in records:
                    date = record[6]  # Date column
                    status_text = record[7]  # Status column
                    row_cells = status_table.add_row().cells
                    row_cells[0].text = date
                    row_cells[1].text = status_text

                    if has_reason and len(record) > 10:
                        reason = record[10] if record[10] else "لم يذكر سبب"
                        row_cells[2].text = reason

                    # تنسيق الخلايا
                    for cell in row_cells:
                        cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.RIGHT
                        for paragraph in cell.paragraphs:
                            for run in paragraph.runs:
                                run.font.rtl = True
                                run.font.size = Pt(11)

                # إضافة فاصل بعد الجدول
                doc.add_paragraph()
                return True  # تم إنشاء الجدول

            # إنشاء جداول للحالات المطلوبة فقط
            tables_created = 0

            # إضافة سجلات الحضور
            if present_records:
                tables_created += 1 if create_status_table('سجلات الحضور', present_records) else 0

            if not_started_records:
                tables_created += 1 if create_status_table('سجلات "لم يباشر"', not_started_records) else 0

            if absence_records:
                tables_created += 1 if create_status_table('سجلات الغياب', absence_records) else 0

            if excused_records:
                tables_created += 1 if create_status_table('سجلات الغياب بعذر', excused_records, has_reason=True) else 0

            if late_records:
                tables_created += 1 if create_status_table('سجلات التأخير', late_records) else 0

            if death_case_records:
                tables_created += 1 if create_status_table('سجلات حالة الوفاة', death_case_records,
                                                           has_reason=True) else 0

            if hospital_records:
                tables_created += 1 if create_status_table('سجلات المنوم', hospital_records, has_reason=True) else 0

            if field_application_records:
                tables_created += 1 if create_status_table('سجلات التطبيق الميداني', field_application_records) else 0

            if student_day_records:
                tables_created += 1 if create_status_table('سجلات يوم طالب', student_day_records) else 0

            if evening_remote_records:
                tables_created += 1 if create_status_table('سجلات مسائية / عن بعد', evening_remote_records) else 0

            # إذا لم يتم إنشاء أي جدول، أضف ملاحظة
            if tables_created == 0:
                no_records_para = doc.add_paragraph()
                no_records_para.alignment = WD_ALIGN_PARAGRAPH.RIGHT
                no_records_run = no_records_para.add_run("لا توجد سجلات للعرض")
                no_records_run.font.rtl = True
                no_records_run.font.italic = True

            # إضافة فاصل صفحة للتوقيعات
            doc.add_page_break()

            # إضافة خط أفقي
            border_paragraph = doc.add_paragraph()
            border_paragraph.paragraph_format.border_bottom = True

            # إضافة نص التقرير مولد من طرف
            footer_paragraph = doc.add_paragraph()
            footer_paragraph.alignment = WD_ALIGN_PARAGRAPH.RIGHT
            footer_run = footer_paragraph.add_run("تقرير مولد من طرف نظام إدارة الحضور والغياب")
            footer_run.font.size = Pt(11)
            footer_run.font.rtl = True

            # إضافة الفراغ
            for _ in range(5):
                doc.add_paragraph()

            # إضافة اسم المستخدم الكامل
            user_name_paragraph = doc.add_paragraph()
            user_name_paragraph.alignment = WD_ALIGN_PARAGRAPH.RIGHT
            user_name_run = user_name_paragraph.add_run(f"اسم المستخدم: {self.current_user['full_name']}")
            user_name_run.font.size = Pt(12)
            user_name_run.font.rtl = True
            user_name_run.font.bold = True

            # إضافة خط التوقيع
            signature_paragraph = doc.add_paragraph()
            signature_paragraph.alignment = WD_ALIGN_PARAGRAPH.RIGHT
            signature_run = signature_paragraph.add_run("التوقيع: ..................................")
            signature_run.font.size = Pt(12)
            signature_run.font.rtl = True

            # إضافة التاريخ والوقت الحالي
            now = datetime.datetime.now()
            date_time_str = now.strftime("%Y-%m-%d %H:%M:%S")

            date_time_paragraph = doc.add_paragraph()
            date_time_paragraph.alignment = WD_ALIGN_PARAGRAPH.RIGHT
            date_time_run = date_time_paragraph.add_run(f"تاريخ ووقت الطباعة: {date_time_str}")
            date_time_run.font.size = Pt(10)
            date_time_run.font.rtl = True

            # حفظ المستند
            export_file = filedialog.asksaveasfilename(
                defaultextension=".docx",
                filetypes=[("Word documents", "*.docx")],
                initialfile=f"تقرير_{name}_{nid}.docx"
            )

            if export_file:
                doc.save(export_file)
                messagebox.showinfo("نجاح", f"تم تصدير بيانات المتدرب بنجاح إلى:\n{export_file}")

                # محاولة فتح الملف
                try:
                    os.startfile(export_file)
                except:
                    pass

        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء تصدير البيانات: {str(e)}")


    def update_statistics(self):
        cursor = self.conn.cursor()
        # احتساب عدد المتدربين غير المستبعدين فقط
        cursor.execute("SELECT COUNT(*) FROM trainees WHERE is_excluded=0")
        total_students = cursor.fetchone()[0]
        self.total_students_var.set(str(total_students))

        date_str = self.date_entry.get_date().strftime("%Y-%m-%d")

        # استعلام محسّن: استخدام GROUP BY والدالة المجمعة COUNT مع CASE
        cursor.execute("""
            SELECT 
                COALESCE(SUM(CASE WHEN a.status = 'حاضر' THEN 1 ELSE 0 END), 0) as present_count,
                COALESCE(SUM(CASE WHEN a.status = 'غائب' THEN 1 ELSE 0 END), 0) as absent_count,
                COALESCE(SUM(CASE WHEN a.status = 'متأخر' THEN 1 ELSE 0 END), 0) as late_count,
                COALESCE(SUM(CASE WHEN a.status = 'غائب بعذر' THEN 1 ELSE 0 END), 0) as excused_count,
                COALESCE(SUM(CASE WHEN a.status = 'لم يباشر' THEN 1 ELSE 0 END), 0) as not_started_count,
                COALESCE(SUM(CASE WHEN a.status = 'تطبيق ميداني' THEN 1 ELSE 0 END), 0) as field_app_count,
                COALESCE(SUM(CASE WHEN a.status = 'يوم طالب' THEN 1 ELSE 0 END), 0) as student_day_count,
                COALESCE(SUM(CASE WHEN a.status = 'مسائية / عن بعد' THEN 1 ELSE 0 END), 0) as evening_remote_count,
                COALESCE(SUM(CASE WHEN a.status = 'حالة وفاة' THEN 1 ELSE 0 END), 0) as death_case_count,
                COALESCE(SUM(CASE WHEN a.status = 'منوم' THEN 1 ELSE 0 END), 0) as hospital_count
            FROM attendance a
            JOIN trainees t ON a.national_id = t.national_id
            WHERE a.date=? AND t.is_excluded=0
        """, (date_str,))

        result = cursor.fetchone()

        # تحديث متغيرات العرض
        self.present_students_var.set(str(result[0]))
        self.absent_students_var.set(str(result[1]))
        self.late_students_var.set(str(result[2]))
        self.excused_students_var.set(str(result[3]))
        self.not_started_students_var.set(str(result[4]))
        self.field_application_var.set(str(result[5]))
        self.student_day_var.set(str(result[6]))
        self.evening_remote_var.set(str(result[7]))
        self.death_case_var.set(str(result[8]))
        self.hospital_var.set(str(result[9]))

        # حساب نسبة الحضور
        if total_students > 0:
            # إضافة الحالات الجديدة لحساب نسبة الحضور
            attendance_rate = ((result[0] + result[2] + result[5] + result[6] + result[7]) / total_students) * 100
        else:
            attendance_rate = 0.0

        self.attendance_rate_var.set(f"{attendance_rate:.2f}%")

    def check_student_absence(self, national_id, current_date):
        """
        فحص حالة غياب المتدرب ورصد الغياب المتكرر
        يتم استدعاء هذه الدالة عند تسجيل غياب جديد للمتدرب

        المدخلات:
            national_id: رقم هوية المتدرب
            current_date: تاريخ اليوم الحالي بتنسيق YYYY-MM-DD

        المخرجات:
            tuple(bool, str): الأول يشير إلى وجود غياب متكرر، والثاني هو نص رسالة التنبيه
        """
        cursor = self.conn.cursor()

        # الحصول على معلومات المتدرب
        cursor.execute("""
            SELECT name, rank, course 
            FROM trainees 
            WHERE national_id=?
        """, (national_id,))

        student_info = cursor.fetchone()
        if not student_info:
            return False, ""

        student_name, student_rank, student_course = student_info

        # تحويل التاريخ الحالي إلى كائن تاريخ
        current_date_obj = datetime.datetime.strptime(current_date, "%Y-%m-%d").date()

        # الحصول على تواريخ حضور المتدرب في الأيام السابقة (دون اليوم الحالي)
        cursor.execute("""
            SELECT date, status 
            FROM attendance 
            WHERE national_id=? AND date < ? 
            ORDER BY date DESC
        """, (national_id, current_date))

        attendance_records = cursor.fetchall()

        # حساب عدد أيام الغياب المتتالية
        consecutive_absences = 0

        # حساب عدد أيام الغياب الإجمالية
        total_absences = 0

        # التحقق أولاً ما إذا كان اليوم المسجل هو "غائب"
        consecutive_absences = 1  # اليوم الحالي محسوب كغياب (لأننا ندعو هذه الدالة فقط عند تسجيل غياب)
        total_absences = 1

        # معالجة سجلات الحضور السابقة
        last_date = current_date_obj
        for record in attendance_records:
            date_str, status = record
            record_date = datetime.datetime.strptime(date_str, "%Y-%m-%d").date()

            # حساب إجمالي الغياب (غائب وغائب بعذر يُحسبان كغياب للإجمالي)
            if status in ["غائب", "غائب بعذر"]:
                total_absences += 1

                # التحقق من التتابع - يجب أن يكون الفرق يوم واحد للاعتبار متتاليًا
                if (last_date - record_date).days == 1 and status == "غائب":
                    consecutive_absences += 1
                else:
                    # إذا كان هناك انقطاع في التتابع، نتوقف عن العد
                    if status != "غائب":  # إذا كان "غائب بعذر" لا يُحسب في التتابع
                        continue
            else:
                # إذا كان المتدرب حاضرًا أو حالة أخرى، نتوقف عن عد الأيام المتتالية
                break

            last_date = record_date

        # تحديد نوع التنبيه المطلوب
        alert_message = ""
        show_alert = False

        if consecutive_absences >= 3:
            show_alert = True

            if consecutive_absences >= 4:
                # تنبيه أحمر للغياب المتكرر أكثر من 3 أيام متتالية
                alert_message = f"⚠️ تنبيه هام: المتدرب {student_name} ({student_rank}) متغيب {consecutive_absences} أيام متتالية!\n\n" \
                                f"✓ الإجراء المطلوب: رفع محاضر الغياب \nالى سعادة قائد المدينة بخطاب رسمي.\n" \
                                f"✓ الدورة: {student_course}\n" \
                                f"✓ إجمالي أيام الغياب: {total_absences} أيام"
                alert_type = "خطير"
                alert_color = "red"
            else:
                # تنبيه أصفر للغياب 3 أيام متتالية
                alert_message = f"⚠️ تنبيه: المتدرب {student_name} ({student_rank}) متغيب {consecutive_absences} أيام متتالية.\n\n" \
                                f"✓ الدورة: {student_course}\n" \
                                f"✓ إجمالي أيام الغياب: {total_absences} أيام"
                alert_type = "متوسط"
                alert_color = "orange"

        return show_alert, alert_message, alert_type if show_alert else None, alert_color if show_alert else None

    # 1. أولاً، إضافة عمود جديد في جدول attendance لحفظ اسم المستقبل
    def update_database_schema(self):
        """إضافة عمود receiver_name في جدول attendance"""
        try:
            cursor = self.conn.cursor()
            cursor.execute("PRAGMA table_info(attendance)")
            columns = [column[1] for column in cursor.fetchall()]

            if "receiver_name" not in columns:
                self.conn.execute("ALTER TABLE attendance ADD COLUMN receiver_name TEXT DEFAULT ''")
                self.conn.commit()
                print("تم إضافة عمود receiver_name بنجاح")
        except Exception as e:
            print(f"خطأ في تحديث قاعدة البيانات: {str(e)}")

    def insert_attendance_record(self, status, excuse_reason=""):
        """دالة تسجيل الحضور مع معالجة حالة المستقبلين"""
        if not self.current_user["permissions"]["can_edit_attendance"]:
            messagebox.showwarning("تنبيه", "ليس لديك صلاحية تسجيل الحضور والغياب")
            return

        national_id = self.id_entry.get().strip()
        if not national_id:
            messagebox.showwarning("تنبيه", "الرجاء اختيار متدرب من خلال البحث بالاسم أو الهوية")
            return

        cursor = self.conn.cursor()
        cursor.execute("""
            SELECT national_id, name, rank, course, is_excluded 
            FROM trainees 
            WHERE national_id=?
        """, (national_id,))

        trainee = cursor.fetchone()
        if not trainee:
            messagebox.showwarning("تنبيه", "لا يوجد متدرب بهذا الرقم")
            return

        # التحقق من استبعاد المتدرب
        if trainee[4] == 1:
            messagebox.showwarning("تنبيه", "هذا المتدرب مستبعد ولا يمكن تسجيل حضوره")
            return

        current_date = self.date_entry.get_date().strftime("%Y-%m-%d")
        cursor.execute("SELECT status FROM attendance WHERE national_id=? AND date=?", (trainee[0], current_date))
        existing_record = cursor.fetchone()

        if existing_record:
            existing_status = existing_record[0]

            # استخدام نوافذ خطأ بدلاً من معلومات لجذب انتباه المستخدم
            if existing_status == status:
                # إذا كانت نفس الحالة
                messagebox.showerror("خطأ في التكرار",
                                     f"⚠️ تنبيه: المتدرب {trainee[1]} مسجل بالفعل بحالة '{existing_status}' اليوم\n\nلا يمكن تكرار نفس الحالة للمتدرب في نفس اليوم.")
            else:
                # إذا كانت حالة مختلفة
                messagebox.showerror("تعارض في الحالة",
                                     f"⚠️ تنبـــيه: المتدرب {trainee[1]} مسجل بالفعل بحالة '{existing_status}' اليوم\n\nلتغيير الحالة من '{existing_status}' إلى '{status}'، يرجى استخدام خاصية تعديل الحضور من قائمة سجل الحضور.")

            # مسح قيمة الهوية
            self.id_entry.delete(0, tk.END)
            self.name_search_entry.delete(0, tk.END)
            return

        # التحقق من حالة المتدرب في اليوم السابق
        current_date_obj = self.date_entry.get_date()
        yesterday_date_obj = current_date_obj - datetime.timedelta(days=1)
        yesterday_date = yesterday_date_obj.strftime("%Y-%m-%d")

        cursor.execute("SELECT status FROM attendance WHERE national_id=? AND date=?", (trainee[0], yesterday_date))
        yesterday_record = cursor.fetchone()

        # متغير لحفظ اسم المستقبل
        receiver_name = ""

        # معالجة الحالات المختلفة
        if yesterday_record and yesterday_record[0] == "لم يباشر":
            if status in ["حاضر", "متأخر"]:
                # المتدرب كان "لم يباشر" بالأمس واليوم "حاضر" أو "متأخر" - يجب إدخال اسم المستقبل
                receiver_name = self.get_receiver_name(trainee[1])
                if not receiver_name:
                    # إذا ألغى المستخدم أو لم يدخل اسم، نوقف العملية
                    return
            elif status == "لم يباشر":
                # المتدرب كان "لم يباشر" بالأمس واليوم أيضاً "لم يباشر" - مسموح بدون تنبيه
                pass  # لا نفعل شيء، نكمل التسجيل بشكل طبيعي
            elif status == "غائب":
                # المتدرب كان "لم يباشر" بالأمس واليوم "غائب" - نعرض التنبيه
                response = messagebox.askquestion("تنبيه هام ⚠️",
                                                  f"المتدرب {trainee[1]} مسجل كـ 'لم يباشر' في اليوم السابق.\n\n"
                                                  "• تأكد من أن المتدرب لم يباشر الدورة فعلاً.\n"
                                                  "• إذا حضر المتدرب اليوم، يجب تسجيله كـ 'حاضر' أو 'متأخر'.\n"
                                                  "• استمرار تسجيله كـ 'غائب' يعتبر مخالف لتعليمات التدريب المستديمة.\n\n"
                                                  "هل تريد تغيير الحالة إلى 'لم يباشر' بدلاً من 'غائب'؟",
                                                  icon="warning")
                if response == "yes":
                    status = "لم يباشر"
                elif response == "no":
                    # إضافة تأكيد إضافي عند الإصرار على الغياب
                    confirm = messagebox.askquestion("تأكيد نهائي",
                                                     f"هل أنت متأكد من تسجيل المتدرب {trainee[1]} كـ 'غائب' رغم أنه 'لم يباشر' بالأمس؟",
                                                     icon="warning")
                    if confirm != "yes":
                        return

        t_id, t_name, t_rank, t_course, _ = trainee
        current_time = datetime.datetime.now().strftime("%H:%M:%S")

        # معالجة تسجيل حالة الغياب ورصد الغياب المتكرر
        absence_alert = False
        alert_message = ""
        alert_type = None
        alert_color = None

        if status in ["غائب"]:
            absence_alert, alert_message, alert_type, alert_color = self.check_student_absence(t_id, current_date)

        try:
            # استخدام cursor منفصل للحصول على lastrowid
            cursor = self.conn.cursor()

            cursor.execute("""
                INSERT INTO attendance (
                    national_id, name, rank, course,
                    time, date, status, original_status,
                    registered_by, excuse_reason,
                    updated_by, updated_at, receiver_name
                )
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                t_id, t_name, t_rank, t_course,
                current_time, current_date,
                status, status,
                self.current_user["full_name"], excuse_reason,
                "", "", receiver_name
            ))

            # الحصول على معرف التسجيل المضاف
            attendance_id = cursor.lastrowid

            # التأكد من commit التغييرات
            self.conn.commit()

            # إضافة معلومات التسجيل إلى قائمة السجل للتراجع
            self.session_attendance_history.append({
                'id': attendance_id,
                'national_id': t_id,
                'name': t_name,
                'course': t_course,
                'status': status,
                'date': current_date,
                'time': current_time
            })

            # تحديث رسالة التأكيد في عنصر الواجهة بدلاً من نافذة منبثقة
            if status == "حاضر":
                icon_status = "✅"
            elif status == "غائب":
                icon_status = "❌"
            elif status == "متأخر":
                icon_status = "⏰"
            elif status == "غائب بعذر":
                icon_status = "📝"
            elif status == "لم يباشر":
                icon_status = "⏳"
            elif status == "حالة وفاة":
                icon_status = "💔"
            elif status == "منوم":
                icon_status = "🏥"
            else:
                icon_status = "📌"

            # نعرض الرسالة فقط في حقل آخر متدرب سُجّل بدلاً من نافذة منبثقة
            self.last_registered_label.config(text=f"آخر متدرب سُجِّل: {t_name} ({status}) {icon_status}")

            # مسح حقول الإدخال
            self.id_entry.delete(0, tk.END)
            self.name_search_entry.delete(0, tk.END)
            self.name_listbox.delete(0, tk.END)

            self.update_statistics()
            self.update_attendance_display()

            # عرض تنبيه الغياب المتكرر إذا كان مطلوبًا
            if absence_alert:
                self.show_absence_alert(alert_message, alert_type, alert_color)

        except Exception as e:
            messagebox.showerror("خطأ", str(e))

    # 3. دالة الحصول على اسم المستقبل (كما هي)
    def get_receiver_name(self, student_name):
        """نافذة لإدخال اسم صاحب الصلاحية الذي استقبل المتدرب - محدثة بحجم أكبر"""
        receiver_window = tk.Toplevel(self.root)
        receiver_window.title("مستقبل المتدرب")
        receiver_window.geometry("550x450")  # تكبير النافذة
        receiver_window.configure(bg=self.colors["light"])
        receiver_window.transient(self.root)
        receiver_window.grab_set()

        # توسيط النافذة
        x = (receiver_window.winfo_screenwidth() - 550) // 2
        y = (receiver_window.winfo_screenheight() - 450) // 2
        receiver_window.geometry(f"550x450+{x}+{y}")

        # عنوان النافذة
        tk.Label(
            receiver_window,
            text="صاحب صلاحية مستقبل المتدرب",
            font=("Tajawal", 20, "bold"),  # خط أكبر
            bg=self.colors["primary"],
            fg="white",
            padx=15, pady=15
        ).pack(fill=tk.X)

        # إطار المحتوى
        content_frame = tk.Frame(receiver_window, bg=self.colors["light"], padx=30, pady=30)
        content_frame.pack(fill=tk.BOTH, expand=True)

        tk.Label(
            content_frame,
            text=f"المتدرب: {student_name}",
            font=("Tajawal", 14, "bold"),
            bg=self.colors["light"],
            fg=self.colors["primary"]
        ).pack(pady=(0, 5))

        tk.Label(
            content_frame,
            text="كان في حالة 'لم يباشر' بالأمس",
            font=("Tajawal", 12),
            bg=self.colors["light"]
        ).pack(pady=(0, 15))

        tk.Label(
            content_frame,
            text="من فضلك أدخل اسم صاحب الصلاحية الذي استقبله:",
            font=("Tajawal", 14, "bold"),
            bg=self.colors["light"],
            fg=self.colors["danger"]
        ).pack(pady=(0, 15))

        receiver_var = tk.StringVar()
        receiver_entry = tk.Entry(
            content_frame,
            textvariable=receiver_var,
            font=("Tajawal", 14),  # خط أكبر
            width=35,
            bd=2,
            relief=tk.GROOVE
        )
        receiver_entry.pack(pady=5)
        receiver_entry.focus_set()

        # متغير لحفظ النتيجة
        result = [None]

        def save_receiver():
            name = receiver_var.get().strip()
            if not name:
                messagebox.showwarning("تنبيه", "يجب إدخال اسم المستقبل")
                receiver_entry.focus_set()
                return
            result[0] = name
            receiver_window.destroy()

        def on_enter(event):
            save_receiver()

        receiver_entry.bind("<Return>", on_enter)

        # إطار الأزرار
        button_frame = tk.Frame(receiver_window, bg=self.colors["light"], pady=15)
        button_frame.pack(fill=tk.X, padx=30)

        save_btn = tk.Button(
            button_frame,
            text="حفظ",
            font=("Tajawal", 12, "bold"),
            bg=self.colors["success"],
            fg="white",
            padx=20, pady=8,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=save_receiver
        )
        save_btn.pack(side=tk.LEFT, padx=10)

        cancel_btn = tk.Button(
            button_frame,
            text="إلغاء",
            font=("Tajawal", 12, "bold"),
            bg=self.colors["danger"],
            fg="white",
            padx=20, pady=8,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=receiver_window.destroy
        )
        cancel_btn.pack(side=tk.RIGHT, padx=10)

        # انتظار إغلاق النافذة
        receiver_window.wait_window()

        return result[0]

    # 1. دالة معالجة المستقبلين للتحضير الجماعي
    def get_bulk_receivers_for_not_started(self, not_started_students, course_name):
        """نافذة لإدخال أسماء المستقبلين للمتدربين الذين كانوا 'لم يباشر' بالأمس"""
        if not not_started_students:
            return {}

        receivers_window = tk.Toplevel(self.root)
        receivers_window.title("مستقبلي المتدربين")
        receivers_window.geometry("700x600")
        receivers_window.configure(bg=self.colors["light"])
        receivers_window.transient(self.root)
        receivers_window.grab_set()

        # توسيط النافذة
        x = (receivers_window.winfo_screenwidth() - 700) // 2
        y = (receivers_window.winfo_screenheight() - 600) // 2
        receivers_window.geometry(f"700x600+{x}+{y}")

        # عنوان النافذة
        tk.Label(
            receivers_window,
            text=f"مستقبلي المتدربين في دورة: {course_name}",
            font=("Tajawal", 18, "bold"),
            bg=self.colors["primary"],
            fg="white",
            padx=15, pady=15
        ).pack(fill=tk.X)

        # إطار المحتوى
        main_frame = tk.Frame(receivers_window, bg=self.colors["light"])
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

        tk.Label(
            main_frame,
            text=f"يوجد {len(not_started_students)} متدرب كانوا في حالة 'لم يباشر' بالأمس",
            font=("Tajawal", 14, "bold"),
            bg=self.colors["light"],
            fg=self.colors["danger"]
        ).pack(pady=(0, 10))

        # خيارات الإدخال
        input_type_var = tk.StringVar(value="same")

        options_frame = tk.Frame(main_frame, bg=self.colors["light"])
        options_frame.pack(fill=tk.X, pady=10)

        tk.Radiobutton(
            options_frame,
            text="نفس المستقبل لجميع المتدربين",
            variable=input_type_var,
            value="same",
            font=("Tajawal", 12),
            bg=self.colors["light"]
        ).pack(anchor=tk.W)

        tk.Radiobutton(
            options_frame,
            text="مستقبل مختلف لكل متدرب",
            variable=input_type_var,
            value="different",
            font=("Tajawal", 12),
            bg=self.colors["light"]
        ).pack(anchor=tk.W)

        # إطار الإدخال الموحد
        same_receiver_frame = tk.Frame(main_frame, bg=self.colors["light"])
        same_receiver_frame.pack(fill=tk.X, pady=10)

        tk.Label(
            same_receiver_frame,
            text="اسم المستقبل:",
            font=("Tajawal", 12, "bold"),
            bg=self.colors["light"]
        ).pack(anchor=tk.W)

        same_receiver_var = tk.StringVar()
        same_receiver_entry = tk.Entry(
            same_receiver_frame,
            textvariable=same_receiver_var,
            font=("Tajawal", 12),
            width=40
        )
        same_receiver_entry.pack(fill=tk.X, pady=5)

        # إطار الإدخال المتعدد
        different_receivers_frame = tk.Frame(main_frame, bg=self.colors["light"])

        # إنشاء جدول لإدخال المستقبلين
        canvas = tk.Canvas(different_receivers_frame, bg=self.colors["light"])
        scrollbar = tk.Scrollbar(different_receivers_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg=self.colors["light"])

        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )

        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        # قاموس لحفظ المدخلات
        receiver_entries = {}

        # إنشاء حقول الإدخال لكل متدرب
        for student in not_started_students:
            student_frame = tk.Frame(scrollable_frame, bg=self.colors["light"], pady=5)
            student_frame.pack(fill=tk.X, padx=5)

            tk.Label(
                student_frame,
                text=f"{student['name']} ({student['national_id']})",
                font=("Tajawal", 10),
                bg=self.colors["light"],
                width=30,
                anchor=tk.W
            ).pack(side=tk.LEFT, padx=5)

            receiver_var = tk.StringVar()
            receiver_entry = tk.Entry(
                student_frame,
                textvariable=receiver_var,
                font=("Tajawal", 10),
                width=30
            )
            receiver_entry.pack(side=tk.LEFT, padx=5)

            receiver_entries[student['national_id']] = receiver_var

        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        # دالة لتبديل الإطارات
        def toggle_frames(*args):
            if input_type_var.get() == "same":
                different_receivers_frame.pack_forget()
                same_receiver_frame.pack(fill=tk.X, pady=10)
                same_receiver_entry.focus_set()
            else:
                same_receiver_frame.pack_forget()
                different_receivers_frame.pack(fill=tk.BOTH, expand=True, pady=10)

        input_type_var.trace("w", toggle_frames)
        toggle_frames()

        # متغير لحفظ النتائج
        result = [None]

        def save_receivers():
            receivers_dict = {}

            if input_type_var.get() == "same":
                receiver_name = same_receiver_var.get().strip()
                if not receiver_name:
                    messagebox.showwarning("تنبيه", "يجب إدخال اسم المستقبل")
                    return

                # نفس المستقبل لجميع المتدربين
                for student in not_started_students:
                    receivers_dict[student['national_id']] = receiver_name
            else:
                # مستقبل مختلف لكل متدرب
                for student_id, receiver_var in receiver_entries.items():
                    receiver_name = receiver_var.get().strip()
                    if not receiver_name:
                        messagebox.showwarning("تنبيه", "يجب إدخال اسم المستقبل لجميع المتدربين")
                        return
                    receivers_dict[student_id] = receiver_name

            result[0] = receivers_dict
            receivers_window.destroy()

        # أزرار الإجراءات
        button_frame = tk.Frame(receivers_window, bg=self.colors["light"], pady=15)
        button_frame.pack(fill=tk.X, padx=20)

        save_btn = tk.Button(
            button_frame,
            text="حفظ",
            font=("Tajawal", 12, "bold"),
            bg=self.colors["success"],
            fg="white",
            padx=20, pady=8,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=save_receivers
        )
        save_btn.pack(side=tk.LEFT, padx=10)

        cancel_btn = tk.Button(
            button_frame,
            text="إلغاء",
            font=("Tajawal", 12, "bold"),
            bg=self.colors["danger"],
            fg="white",
            padx=20, pady=8,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=receivers_window.destroy
        )
        cancel_btn.pack(side=tk.RIGHT, padx=10)

        receivers_window.wait_window()

        return result[0]

    def show_absence_alert(self, message, alert_type, alert_color):
        """عرض نافذة تنبيه مخصصة للغياب المتكرر"""
        alert_window = tk.Toplevel(self.root)
        alert_window.title(f"تنبيه غياب متكرر - {alert_type}")
        alert_window.geometry("650x500")  # نافذة أكبر
        alert_window.configure(bg="#FFFFFF")
        alert_window.transient(self.root)
        alert_window.grab_set()

        # توسيط النافذة
        x = (alert_window.winfo_screenwidth() - 650) // 2
        y = (alert_window.winfo_screenheight() - 500) // 2
        alert_window.geometry(f"650x500+{x}+{y}")

        # إطار العنوان
        title_frame = tk.Frame(alert_window, bg=alert_color, padx=10, pady=15)
        title_frame.pack(fill=tk.X)

        title_label = tk.Label(
            title_frame,
            text="⚠️ تنبيه غياب متكرر ⚠️",
            font=("Tajawal", 20, "bold"),  # خط أكبر وغامق
            bg=alert_color,
            fg="white"
        )
        title_label.pack()

        # إطار الرسالة
        message_frame = tk.Frame(alert_window, bg="#FFFFFF", padx=20, pady=20)
        message_frame.pack(fill=tk.BOTH, expand=True)

        message_text = tk.Text(
            message_frame,
            wrap=tk.WORD,
            bg="#FFFFFF",
            font=("Tajawal", 16, "bold"),  # خط أكبر وغامق
            relief=tk.FLAT,
            height=8
        )
        message_text.insert(tk.END, message)
        message_text.configure(state="disabled")  # جعل النص للقراءة فقط
        message_text.pack(fill=tk.BOTH, expand=True)

        # أزرار الإجراءات
        button_frame = tk.Frame(alert_window, bg="#FFFFFF", padx=20, pady=15)
        button_frame.pack(fill=tk.X)

        ok_button = tk.Button(
            button_frame,
            text="موافق",
            font=("Tajawal", 14, "bold"),  # خط أكبر
            bg="#4CAF50",
            fg="white",
            padx=25,  # زيادة حجم الزر
            pady=8,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=alert_window.destroy
        )
        ok_button.pack(side=tk.RIGHT, padx=10)

        # إضافة زر خاص إذا كان التنبيه من النوع الخطير
        if alert_type == "خطير":
            action_button = tk.Button(
                button_frame,
                text="اتخاذ إجراء",
                font=("Tajawal", 14, "bold"),  # خط أكبر
                bg="#FF5722",
                fg="white",
                padx=25,  # زيادة حجم الزر
                pady=8,
                bd=0,
                relief=tk.FLAT,
                cursor="hand2",
                command=lambda: self.take_absence_action(alert_window)
            )
            action_button.pack(side=tk.LEFT, padx=10)

    def take_absence_action(self, parent_window=None):
        """عرض نافذة اتخاذ إجراء للغياب المتكرر"""
        # نافذة بسيطة لعرض الإجراءات المطلوبة
        messagebox.showinfo(
            "إجراءات متابعة الغياب",
            "لا يزال قيد التطوير\n\n"
            "ملاحظة: يمكن الإنتقال الى ملف المتدرب و تصدير محاضر غيابه"
        )

        # إغلاق نافذة التنبيه إذا كانت مفتوحة
        if parent_window:
            parent_window.destroy()

    def process_barcode_ids(self, status):
        """تعديل دالة معالجة الباركود لإضافة فحص الغياب المتكرر"""
        if not self.current_user["permissions"]["can_edit_attendance"]:
            messagebox.showwarning("تنبيه", "ليس لديك صلاحية تسجيل الحضور والغياب")
            return

        # قراءة النص من مربع الإدخال
        barcode_text = self.barcode_text.get(1.0, tk.END).strip()
        if not barcode_text:
            messagebox.showinfo("تنبيه", "الرجاء إدخال أرقام الهويات أولاً")
            return

        # تقسيم النص إلى أسطر للحصول على أرقام الهويات
        id_lines = [line.strip() for line in barcode_text.split("\n") if line.strip()]
        if not id_lines:
            messagebox.showinfo("تنبيه", "لم يتم العثور على أرقام هويات صالحة")
            return

        # الحصول على التاريخ الحالي ووقت التسجيل
        current_date = self.date_entry.get_date().strftime("%Y-%m-%d")
        current_time = datetime.datetime.now().strftime("%H:%M:%S")

        cursor = self.conn.cursor()

        # قوائم لتتبع النتائج
        successful_ids = []
        failed_ids = []
        already_registered_ids = []
        excluded_ids = []
        absence_alerts = []  # لتخزين معلومات تنبيهات الغياب المتكرر

        # معالجة كل رقم هوية
        for national_id in id_lines:
            # تخطي القيم الفارغة
            if not national_id:
                continue

            try:
                # التحقق من وجود المتدرب وما إذا كان مستبعدًا
                cursor.execute("""
                    SELECT national_id, name, rank, course, is_excluded 
                    FROM trainees 
                    WHERE national_id=?
                """, (national_id,))

                trainee = cursor.fetchone()
                if not trainee:
                    failed_ids.append(national_id)
                    continue

                # التحقق من استبعاد المتدرب
                if trainee[4] == 1:
                    excluded_ids.append(national_id)
                    continue

                # التحقق مما إذا كان المتدرب مسجلاً بالفعل لهذا اليوم
                cursor.execute("SELECT status FROM attendance WHERE national_id=? AND date=?",
                               (trainee[0], current_date))
                existing_record = cursor.fetchone()

                if existing_record:
                    already_registered_ids.append(national_id)
                    continue

                # فحص تنبيهات الغياب إذا كان التسجيل غيابًا
                if status == "غائب":
                    absence_alert, alert_message, alert_type, alert_color = self.check_student_absence(trainee[0],
                                                                                                       current_date)
                    if absence_alert:
                        absence_alerts.append((alert_message, alert_type, alert_color))

                # إدراج سجل حضور جديد
                with self.conn:
                    self.conn.execute("""
                        INSERT INTO attendance (
                            national_id, name, rank, course,
                            time, date, status, original_status,
                            registered_by, excuse_reason,
                            updated_by, updated_at
                        )
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    """, (
                        trainee[0], trainee[1], trainee[2], trainee[3],
                        current_time, current_date,
                        status, status,
                        self.current_user["full_name"], "",
                        "", ""
                    ))

                successful_ids.append(national_id)

            except Exception as e:
                print(f"خطأ في معالجة الهوية {national_id}: {str(e)}")
                failed_ids.append(national_id)

        # إعداد رسالة ملخص النتائج
        result_message = f"تمت معالجة {len(id_lines)} رقم هوية:\n\n"

        if successful_ids:
            result_message += f"✅ تم تسجيل {len(successful_ids)} متدرب بنجاح بحالة '{status}'.\n"

        if already_registered_ids:
            result_message += f"⚠️ {len(already_registered_ids)} متدرب مسجل مسبقاً في هذا اليوم.\n"

        if excluded_ids:
            result_message += f"❌ {len(excluded_ids)} متدرب مستبعد لا يمكن تسجيل حضورهم.\n"

        if failed_ids:
            result_message += f"❓ {len(failed_ids)} رقم هوية غير موجود في قاعدة البيانات."

        # عرض النتائج
        messagebox.showinfo("نتائج تسجيل الحضور", result_message)

        # تفريغ مربع النص بعد المعالجة الناجحة إذا تم تسجيل متدربين بنجاح
        if successful_ids:
            self.barcode_text.delete(1.0, tk.END)

        # تحديث الإحصائيات وعرض الحضور
        self.update_statistics()
        self.update_attendance_display()

        # عرض تنبيهات الغياب المتكرر (إذا وجدت)
        if absence_alerts:
            # عرض التنبيه الأول فقط إذا كان هناك أكثر من تنبيه
            first_alert = absence_alerts[0]
            self.show_absence_alert(
                first_alert[0] + f"\n\nملاحظة: هناك {len(absence_alerts)} تنبيه غياب متكرر في هذه المجموعة."
                if len(absence_alerts) > 1 else first_alert[0],
                first_alert[1],
                first_alert[2]
            )

    def export_course_to_word(self, course_name):
        """وظيفة تصدير بيانات الدورة إلى ملف وورد مع جدول حضور فارغ للأيام بتنسيق عمودي"""
        if not self.current_user["permissions"]["can_export_data"]:
            messagebox.showwarning("تنبيه", "ليس لديك صلاحية تصدير البيانات")
            return

        try:
            # التأكد من وجود مكتبة python-docx
            if 'Document' not in globals():
                messagebox.showerror("خطأ",
                                     "لم يتم العثور على مكتبة python-docx. قم بتثبيتها باستخدام: pip install python-docx")
                return

            # الحصول على بيانات المتدربين في الدورة (فقط غير المستبعدين)
            cursor = self.conn.cursor()
            cursor.execute("""
                SELECT national_id, name, rank
                FROM trainees
                WHERE course=? AND is_excluded=0
                ORDER BY name
            """, (course_name,))
            students_data = cursor.fetchall()

            if not students_data:
                messagebox.showinfo("ملاحظة", f"لا يوجد متدربين نشطين مسجلين في الدورة '{course_name}'")
                return

            # إنشاء مستند جديد
            doc = Document()

            # إعداد المستند للغة العربية (RTL) بتنسيق عمودي
            section = doc.sections[0]
            section.page_width = Inches(8.27)  # A4 width in portrait
            section.page_height = Inches(11.69)  # A4 height in portrait
            section.left_margin = Inches(0.5)
            section.right_margin = Inches(0.5)
            section.top_margin = Inches(0.7)
            section.bottom_margin = Inches(0.7)

            # إعداد الرأس (Header) مع خط فاصل
            header = section.header
            header_para = header.paragraphs[0]
            header_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
            header_run = header_para.add_run(f'كشف حضور وغياب متدربين دورة: {course_name}')
            header_run.font.size = Pt(14)
            header_run.font.bold = True
            header_run.font.rtl = True

            # إضافة إجمالي عدد المتدربين في الرأس
            header_para = header.add_paragraph()
            header_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
            student_count_run = header_para.add_run(f'إجمالي عدد المتدربين: {len(students_data)}')
            student_count_run.font.size = Pt(12)
            student_count_run.font.bold = True
            student_count_run.font.rtl = True

            # إضافة خط أفقي بعد معلومات الدورة في الرأس
            header_para.paragraph_format.border_bottom = True

            # إضافة تاريخ الطباعة في الرأس
            today_date = datetime.datetime.now().strftime("%Y-%m-%d")
            header_para = header.add_paragraph()
            header_para.alignment = WD_ALIGN_PARAGRAPH.LEFT
            header_date = header_para.add_run(f'تاريخ الطباعة: {today_date}')
            header_date.font.size = Pt(9)
            header_date.font.rtl = True

            # إعداد التذييل بشكل بسيط
            footer = section.footer
            footer_para = footer.paragraphs[0]
            footer_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
            footer_text = footer_para.add_run('نظام إدارة الحضور والغياب - قسم شؤون المدربين')
            footer_text.font.size = Pt(9)
            footer_text.font.rtl = True

            # إضافة فقرة فاصلة قبل الجدول
            doc.add_paragraph()

            # إنشاء جدول للحضور والغياب
            table = doc.add_table(rows=1, cols=8)
            table.style = 'Table Grid'

            # تعريف رأس الجدول
            hdr_cells = table.rows[0].cells
            headers = ["العدد", "الاسم", "رقم الهوية", "الأحد", "الاثنين", "الثلاثاء", "الأربعاء", "الخميس"]

            # إضافة العناوين من اليمين إلى اليسار (عكس الترتيب)
            for i, header in enumerate(reversed(headers)):
                hdr_cells[i].text = header
                # تنسيق العناوين
                hdr_cells[i].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
                for run in hdr_cells[i].paragraphs[0].runs:
                    run.font.bold = True
                    run.font.size = Pt(11)
                    run.font.rtl = True

                # تطبيق تظليل لرأس الجدول بطريقة بسيطة
                try:
                    shading_elm = parse_xml(r'<w:shd {} w:fill="D9D9D9"/>'.format(nsdecls('w')))
                    hdr_cells[i]._element.get_or_add_tcPr().append(shading_elm)
                except:
                    # في حالة حدوث خطأ، نتجاهل التظليل
                    pass

            # إضافة بيانات المتدربين
            for i, student in enumerate(students_data):
                national_id, name, rank = student
                row_cells = table.add_row().cells

                # إضافة البيانات من اليمين إلى اليسار (عكس الترتيب)
                # العدد (تسلسلي)
                row_cells[7].text = str(i + 1)
                row_cells[7].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER

                # الاسم - تغيير المحاذاة إلى توسيط
                row_cells[6].text = name
                row_cells[6].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER

                # رقم الهوية
                row_cells[5].text = national_id
                row_cells[5].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER

                # الأيام تبقى فارغة للتعبئة يدوياً
                for day_idx in range(5):
                    row_cells[day_idx].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER

                # تنسيق النص في الصف
                for cell in row_cells:
                    for paragraph in cell.paragraphs:
                        for run in paragraph.runs:
                            run.font.rtl = True
                            run.font.size = Pt(10)

            # ضبط أبعاد الجدول لتناسب التنسيق العمودي - زيادة عرض عمود الاسم
            table.autofit = False
            col_widths = [0.5, 2.6, 1.4, 0.7, 0.7, 0.7, 0.7, 0.7]  # زيادة عرض عمود الاسم (2.6 بدلاً من 2.0)

            # تطبيق العرض المحدد لكل عمود
            try:
                for i, width in enumerate(col_widths):
                    table.columns[i].width = Inches(width)
            except:
                # في حالة حدوث خطأ، نتجاهل تعديل العرض
                pass

            # إضافة مساحة بعد الجدول
            doc.add_paragraph()

            # إضافة جدول للتوقيعات
            sig_table = doc.add_table(rows=1, cols=3)
            sig_table.style = 'Table Grid'
            sig_cells = sig_table.rows[0].cells

            sig_cells[2].text = "المسؤول: _________________"
            sig_cells[1].text = "رئيس القسم: ______________"
            sig_cells[0].text = "المدير: __________________"

            for cell in sig_cells:
                cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
                for run in cell.paragraphs[0].runs:
                    run.font.rtl = True
                    run.font.size = Pt(11)

            # إضافة ملاحظات في نهاية المستند
            doc.add_paragraph()
            notes_para = doc.add_paragraph()
            notes_para.alignment = WD_ALIGN_PARAGRAPH.RIGHT
            notes_para.add_run("ملاحظات:").bold = True

            # إضافة خطوط للملاحظات
            for _ in range(3):
                line_para = doc.add_paragraph("_" * 80)
                line_para.alignment = WD_ALIGN_PARAGRAPH.RIGHT

            # حفظ المستند
            export_file = filedialog.asksaveasfilename(
                defaultextension=".docx",
                filetypes=[("Word documents", "*.docx")],
                initialfile=f"كشف_حضور_{course_name}.docx"
            )

            if export_file:
                doc.save(export_file)
                messagebox.showinfo("نجاح", f"تم تصدير كشف الحضور للدورة '{course_name}' بنجاح إلى:\n{export_file}")
                # فتح الملف مباشرة بعد التصدير
                try:
                    os.startfile(export_file)
                except:
                    # في حالة عدم تمكن النظام من فتح الملف، تجاهل الخطأ
                    pass

        except Exception as e:
            messagebox.showerror("خطأ", f"حدث خطأ أثناء تصدير بيانات الدورة: {str(e)}")

    def export_course_diligence_behavior(self, course_name):
        """وظيفة تصدير بيان المواظبة والسلوك للدورة بتنسيق Word مع ترتيب المتدربين حسب الدرجة"""
        if not self.current_user["permissions"]["can_export_data"]:
            messagebox.showwarning("تنبيه", "ليس لديك صلاحية تصدير البيانات")
            return

        try:
            # التأكد من وجود مكتبة python-docx
            if 'Document' not in globals():
                messagebox.showerror("خطأ",
                                     "لم يتم العثور على مكتبة python-docx. قم بتثبيتها باستخدام: pip install python-docx")
                return

            # الحصول على بيانات المتدربين في الدورة (فقط غير المستبعدين)
            cursor = self.conn.cursor()
            cursor.execute("""
                SELECT national_id, name, rank
                FROM trainees
                WHERE course=? AND is_excluded=0
                ORDER BY name
            """, (course_name,))
            students_data = cursor.fetchall()

            if not students_data:
                messagebox.showinfo("ملاحظة", f"لا يوجد متدربين نشطين مسجلين في الدورة '{course_name}'")
                return

            # إنشاء نافذة حالة لإظهار تقدم التصدير
            progress_window = tk.Toplevel(self.root)
            progress_window.title("جاري حساب المواظبة والسلوك")
            progress_window.geometry("400x150")
            progress_window.configure(bg=self.colors["light"])
            progress_window.transient(self.root)
            progress_window.resizable(False, False)
            progress_window.grab_set()

            x = (progress_window.winfo_screenwidth() - 400) // 2
            y = (progress_window.winfo_screenheight() - 150) // 2
            progress_window.geometry(f"400x150+{x}+{y}")

            tk.Label(
                progress_window,
                text=f"جاري حساب نتائج المواظبة والسلوك لدورة: {course_name}",
                font=self.fonts["text_bold"],
                bg=self.colors["light"],
                pady=10
            ).pack()

            progress_var = tk.DoubleVar()
            progress_bar = ttk.Progressbar(
                progress_window,
                variable=progress_var,
                maximum=100,
                length=350
            )
            progress_bar.pack(pady=10)

            status_label = tk.Label(
                progress_window,
                text="جاري تحليل بيانات الحضور والغياب...",
                font=self.fonts["text"],
                bg=self.colors["light"]
            )
            status_label.pack(pady=5)

            progress_window.update()

            # إنشاء مستند جديد
            doc = Document()

            # إعداد المستند للغة العربية (RTL)
            section = doc.sections[0]
            section.page_width = Inches(8.27)  # A4 width
            section.page_height = Inches(11.69)  # A4 height
            section.left_margin = Inches(0.7)
            section.right_margin = Inches(0.7)
            section.top_margin = Inches(0.7)
            section.bottom_margin = Inches(0.7)

            # إضافة عنوان المستند
            title = doc.add_heading(f'بيان المواظبة والسلوك لمتدربين دورة: {course_name}', level=0)
            title.alignment = WD_ALIGN_PARAGRAPH.CENTER
            for run in title.runs:
                run.font.size = Pt(16)
                run.font.bold = True
                run.font.rtl = True

            # إضافة معلومات الطباعة والتاريخ
            date_info = doc.add_paragraph()
            date_info.alignment = WD_ALIGN_PARAGRAPH.LEFT
            today_date = datetime.datetime.now().strftime("%Y-%m-%d")
            date_run = date_info.add_run(f'تاريخ الطباعة: {today_date}')
            date_run.font.size = Pt(10)
            date_run.font.rtl = True

            # إضافة خط أفقي
            border_paragraph = doc.add_paragraph()
            border_paragraph.paragraph_format.border_bottom = True

            # إنشاء جدول للمواظبة والسلوك
            table = doc.add_table(rows=1, cols=6)
            table.style = 'Table Grid'

            # عناوين الجدول (من اليمين إلى اليسار)
            hdr_cells = table.rows[0].cells
            headers = ["عدد", "الاسم", "الرتبة", "رقم الهوية", "المواظبة", "السلوك"]

            for i, header in enumerate(headers):
                # حساب الموقع المناسب للعناوين (من اليمين إلى اليسار)
                idx = len(headers) - i - 1
                hdr_cells[idx].text = header
                hdr_cells[idx].paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
                for run in hdr_cells[idx].paragraphs[0].runs:
                    run.font.bold = True
                    run.font.size = Pt(12)
                    run.font.rtl = True

                # تطبيق تظليل للرأس
                try:
                    shading_elm = parse_xml(r'<w:shd {} w:fill="D9D9D9"/>'.format(nsdecls('w')))
                    hdr_cells[idx]._element.get_or_add_tcPr().append(shading_elm)
                except:
                    pass

            # معالجة بيانات كل متدرب وحساب درجة المواظبة
            student_scores = []
            total_students = len(students_data)

            for index, student in enumerate(students_data):
                national_id, name, rank = student

                # تحديث شريط التقدم
                progress_var.set((index / total_students) * 80)  # 80% للمعالجة
                status_label.config(text=f"معالجة المتدرب {index + 1} من {total_students}: {name}")
                progress_window.update()

                # حساب درجة المواظبة:
                # 1. الدرجة الأولية هي 100
                # 2. خصم 4 درجات لكل غياب كامل
                # 3. خصم 1 درجة لكل تأخير
                # 4. خصم 0.5 درجة لكل غياب بعذر

                # الاستعلام عن حالات الحضور للمتدرب
                cursor.execute("""
                    SELECT status
                    FROM attendance
                    WHERE national_id=?
                """, (national_id,))
                attendance_records = cursor.fetchall()

                diligence_score = 100.0  # البداية من 100

                for record in attendance_records:
                    status = record[0]
                    if status == "غائب" or status == "غائب بعذر":  # تعديل: خصم 4 نقاط لـ "غائب بعذر"
                        diligence_score -= 4.0
                    elif status == "متأخر":
                        diligence_score -= 1.0
                    elif status == "حالة وفاة" or status == "منوم":  # إضافة: خصم 0.5 نقطة للحالات الجديدة
                        diligence_score -= 0.5

                # التأكد من عدم نزول الدرجة عن صفر
                diligence_score = max(0, diligence_score)

                # حفظ بيانات المتدرب مع الدرجة
                student_scores.append((national_id, name, rank, diligence_score))

            # ترتيب المتدربين تصاعدياً حسب درجة المواظبة (الأقل يأتي أولاً)
            student_scores.sort(key=lambda x: x[3])

            # إضافة بيانات المتدربين إلى الجدول بعد الترتيب
            for index, (national_id, name, rank, diligence_score) in enumerate(student_scores):
                # تحديث شريط التقدم
                progress_var.set(80 + (index / total_students) * 15)  # 15% للترتيب والإضافة
                status_label.config(text=f"إضافة المتدرب {index + 1} من {total_students} إلى التقرير")
                progress_window.update()

                # درجة السلوك دائمًا 100
                behavior_score = 100.0

                # إضافة صف جديد للمتدرب
                row_cells = table.add_row().cells

                # الترتيب من اليمين إلى اليسار
                row_cells[5].text = str(index + 1)  # العدد التسلسلي
                row_cells[4].text = name  # الاسم
                row_cells[3].text = rank  # الرتبة
                row_cells[2].text = national_id  # رقم الهوية
                row_cells[1].text = f"{diligence_score:.1f}"  # المواظبة بدقة رقم عشري واحد
                row_cells[0].text = f"{behavior_score:.0f}"  # السلوك (دائمًا 100)

                # تنسيق الخلايا
                for cell in row_cells:
                    cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
                    for run in cell.paragraphs[0].runs:
                        run.font.rtl = True
                        run.font.size = Pt(11)

                # تلوين الصف حسب درجة المواظبة
                if diligence_score < 90:  # إذا كانت الدرجة أقل من 90، تمييزها بلون فاتح
                    try:
                        for cell in row_cells:
                            shading_elm = parse_xml(r'<w:shd {} w:fill="FFDDDD"/>'.format(nsdecls('w')))
                            cell._element.get_or_add_tcPr().append(shading_elm)
                    except:
                        pass

            # تنسيق الجدول
            table.autofit = False
            try:
                # تعيين عرض الأعمدة (العرض بالبوصة)
                widths = [0.8, 0.8, 1.2, 1.5, 2.5, 0.5]  # السلوك، المواظبة، الهوية، الرتبة، الاسم، العدد
                for i, width in enumerate(widths):
                    table.columns[i].width = Inches(width)
            except:
                pass

            # إضافة فقرة فاصلة بعد الجدول
            doc.add_paragraph()

            # إضافة جدول للتوقيعات
            signature_table = doc.add_table(rows=1, cols=3)
            signature_table.style = 'Table Grid'

            sig_cells = signature_table.rows[0].cells
            sig_cells[2].text = "مسؤول الحضور: _________________"
            sig_cells[1].text = "رئيس القسم: __________________"
            sig_cells[0].text = "مدير التدريب: ________________"

            for cell in sig_cells:
                cell.paragraphs[0].alignment = WD_ALIGN_PARAGRAPH.CENTER
                for run in cell.paragraphs[0].runs:
                    run.font.rtl = True
                    run.font.size = Pt(11)

            # إضافة نص توضيحي في نهاية المستند
            doc.add_paragraph()
            note_para = doc.add_paragraph()
            note_para.alignment = WD_ALIGN_PARAGRAPH.RIGHT
            note_run = note_para.add_run("ملاحظات حساب المواظبة:")
            note_run.font.bold = True
            note_run.font.rtl = True

            notes = [
                "- تبدأ درجة المواظبة من 100 درجة.",
                "- يتم خصم 4 درجات عن كل يوم غياب.",
                "- يتم خصم 4 درجات عن كل غياب بعذر.",
                "- يتم خصم 1 درجة عن كل حالة تأخير.",
                "- يتم خصم 0.5 درجة عن كل حالة وفاة.",
                "- يتم خصم 0.5 درجة عن كل حالة منوم.",
                "- درجة السلوك 100 درجة للجميع."
            ]

            for note in notes:
                p = doc.add_paragraph()
                p.alignment = WD_ALIGN_PARAGRAPH.RIGHT
                p.add_run(note).font.rtl = True

            # تحديث شريط التقدم
            progress_var.set(95)
            status_label.config(text="فتح حوار حفظ الملف...")
            progress_window.update()

            # حفظ المستند
            export_file = filedialog.asksaveasfilename(
                defaultextension=".docx",
                filetypes=[("Word documents", "*.docx")],
                initialfile=f"بيان_المواظبة_والسلوك_{course_name}.docx"
            )

            if export_file:
                progress_var.set(95)
                status_label.config(text="جاري حفظ الملف...")
                progress_window.update()

                doc.save(export_file)

                progress_var.set(100)
                status_label.config(text="تم تصدير البيان بنجاح!")
                progress_window.update()

                # إغلاق نافذة التقدم بعد ثانيتين
                progress_window.after(2000, progress_window.destroy)

                messagebox.showinfo("نجاح",
                                    f"تم تصدير بيان المواظبة والسلوك للدورة '{course_name}' بنجاح إلى:\n{export_file}")

                # محاولة فتح الملف تلقائيًا
                try:
                    os.startfile(export_file)
                except:
                    pass
            else:
                progress_window.destroy()

        except Exception as e:
            try:
                progress_window.destroy()
            except:
                pass
            messagebox.showerror("خطأ", f"حدث خطأ أثناء تصدير بيان المواظبة والسلوك: {str(e)}")
